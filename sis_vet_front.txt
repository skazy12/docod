Estructura: .
Archivo: App.css
--------------------------------------------------
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


Estructura: .
Archivo: App.js
--------------------------------------------------
import React from 'react';
import { AuthProvider } from './context/AuthContext';
import AppRoutes from './routes/AppRoutes';
import { Toaster } from 'react-hot-toast';
import './index.css';

function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <AuthProvider>
        <AppRoutes />
        <Toaster
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
            },
          }}
        />
      </AuthProvider>
    </div>
  );
}

export default App;



Estructura: .
Archivo: App.test.js
--------------------------------------------------
// src/App.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders login form with "Iniciar Sesión" title', () => {
  render(<App />);
  const elements = screen.getAllByText(/iniciar sesión/i);
  expect(elements[0]).toBeInTheDocument(); // Verifica el primer elemento encontrado
});


Estructura: .
Archivo: index.css
--------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Fuentes personalizadas */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@layer components {
  .btn-primary {
    @apply w-full flex justify-center py-2 px-4 border border-transparent 
           rounded-md shadow-sm text-sm font-medium text-white 
           bg-primary-600 hover:bg-primary-700 focus:outline-none 
           focus:ring-2 focus:ring-offset-2 focus:ring-primary-500
           transition-colors duration-200;
  }

  .input-primary {
    @apply w-full px-4 py-2 rounded-lg border border-gray-300
           focus:ring-2 focus:ring-primary-500 
           focus:border-primary-500 transition
           placeholder-gray-400 text-gray-900;
  }

  .form-container {
    @apply min-h-screen flex items-center justify-center 
           bg-gray-50 py-12 px-4 sm:px-6 lg:px-8;
  }

  .form-box {
    @apply max-w-md w-full space-y-8 bg-white 
           p-8 rounded-lg shadow-lg;
  }

  .form-title {
    @apply mt-6 text-center text-3xl font-extrabold text-gray-900;
  }

  .form-subtitle {
    @apply mt-2 text-center text-sm text-gray-600;
  }

  .form-link {
    @apply font-medium text-primary-600 hover:text-primary-500;
  }
}

Estructura: .
Archivo: index.js
--------------------------------------------------
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

Estructura: .
Archivo: logo.svg
--------------------------------------------------
[Archivo no incluido en la documentación detallada: logo.svg]


Estructura: .
Archivo: reportWebVitals.js
--------------------------------------------------
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


Estructura: .
Archivo: setupTests.js
--------------------------------------------------
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
// setupTests.js
// src/setupTests.js
jest.mock('axios', () => require('./__mocks__/axiosMock'));



Estructura: api
Archivo: paymentHistoryApi.js
--------------------------------------------------
import axiosInstance from '../config/axios';

// Obtiene el historial de pagos
export const fetchPaymentHistory = async (params) => {
  const response = await axiosInstance.get('/payment-history', { params });
  return response;
};

// Obtiene el resumen de pagos
export const fetchPaymentSummary = async (startDate, endDate) => {
  const response = await axiosInstance.get('/payment-history/summary', {
    params: { fechaInicio: startDate, fechaFin: endDate },
  });
  return response;
};

// Obtiene los detalles de un pago específico
export const fetchPaymentDetails = async (paymentId) => {
  const response = await axiosInstance.get(`/payment-history/${paymentId}`);
  return response;
};


Estructura: components
Archivo: AddMedicalRecord.js
--------------------------------------------------
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axiosInstance from '../config/axios';
import toast from 'react-hot-toast';


const AddMedicalRecord = () => {
  const { petId } = useParams();
  const [servicesByCategory, setServicesByCategory] = useState({});
  const [selectedServices, setSelectedServices] = useState([]);
  const navigate = useNavigate();
  const [favoriteIds, setFavoriteIds] = useState([]); // Estado para favoritos
  const [formData, setFormData] = useState({
    motivoConsulta: '',
    diagnostico: '',
    tratamiento: '',
    observaciones: '',
  });

  useEffect(() => {
    const fetchServices = async () => {
      try {
        // Obtener servicios por categoría
        const response = await axiosInstance.get('/services/by-category');
        const servicesData = response.data.data.servicesByCategory || {};

        // Obtener favoritos del veterinario
        const favoritesResponse = await axiosInstance.get('/favorites');
        const favoriteServices = favoritesResponse.data.data || [];
        const favoriteIdsList = favoriteServices
          .filter((item) => item.itemType === 'VETERINARY_SERVICE')
          .map((item) => item.itemId);

        setFavoriteIds(favoriteIdsList); // Guardar favoritos en el estado

        // Ordenar servicios: favoritos primero
        const sortedServicesByCategory = {};
        Object.keys(servicesData).forEach((category) => {
          const services = servicesData[category];
          const favorites = services.filter((service) => favoriteIdsList.includes(service.id));
          const others = services.filter((service) => !favoriteIdsList.includes(service.id));
          sortedServicesByCategory[category] = [...favorites, ...others];
        });

        setServicesByCategory(sortedServicesByCategory);
      } catch (error) {
        console.error('Error al cargar servicios:', error);
        toast.error('No se pudo cargar la lista de servicios.');
      }
    };

    fetchServices();
  }, []);

  // Toggle service selection
  const toggleServiceSelection = (service) => {
    setSelectedServices((prev) => {
      const exists = prev.find((s) => s.serviceId === service.id);
      if (exists) {
        return prev.filter((s) => s.serviceId !== service.id);
      } else {
        return [
          ...prev,
          {
            serviceId: service.id,
            precioPersonalizado: service.price, // Default price
            notas: '',
          },
        ];
      }
    });
  };

  // Update custom price
  const updateCustomPrice = (serviceId, price) => {
    setSelectedServices((prev) =>
      prev.map((s) =>
        s.serviceId === serviceId ? { ...s, precioPersonalizado: price } : s
      )
    );
  };

  // Update notes
  const updateNotes = (serviceId, notes) => {
    setSelectedServices((prev) =>
      prev.map((s) =>
        s.serviceId === serviceId ? { ...s, notas: notes } : s
      )
    );
  };

  // Handle save medical record
  const handleSave = async () => {
    try {
      const payload = {
        ...formData,
        serviciosRealizados: selectedServices,
      };
  
      const response = await axiosInstance.post(`/historial-clinico/mascota/${petId}`, payload);
  
      if (response.data.success) {
        toast.success('Historial médico registrado exitosamente.');
        navigate(`/pets/${petId}/history`); // Redirige al historial de la mascota
      } else {
        toast.error('Error al guardar el historial médico.');
      }
    } catch (error) {
      console.error('Error al guardar el historial médico:', error);
      toast.error('No se pudo registrar el historial médico.');
    }
  };
  

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Agregar Historial Médico</h1>

      {/* Formulario básico */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium">Motivo de Consulta</label>
          <input
            type="text"
            className="w-full px-3 py-2 border rounded"
            value={formData.motivoConsulta}
            onChange={(e) => setFormData({ ...formData, motivoConsulta: e.target.value })}
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Diagnóstico</label>
          <textarea
            className="w-full px-3 py-2 border rounded"
            value={formData.diagnostico}
            onChange={(e) => setFormData({ ...formData, diagnostico: e.target.value })}
          ></textarea>
        </div>
        <div>
          <label className="block text-sm font-medium">Tratamiento</label>
          <textarea
            className="w-full px-3 py-2 border rounded"
            value={formData.tratamiento}
            onChange={(e) => setFormData({ ...formData, tratamiento: e.target.value })}
          ></textarea>
        </div>
        <div>
          <label className="block text-sm font-medium">Observaciones</label>
          <textarea
            className="w-full px-3 py-2 border rounded"
            value={formData.observaciones}
            onChange={(e) => setFormData({ ...formData, observaciones: e.target.value })}
          ></textarea>
        </div>
      </div>

      {/* Lista de servicios */}
      <div className="mt-6">
        <h2 className="text-xl font-semibold mb-4">Servicios Disponibles</h2>
        {Object.keys(servicesByCategory).map((category) => (
          <div key={category} className="mb-6">
            <h3 className="text-lg font-bold">{category}</h3>
            <ul>
              {servicesByCategory[category].map((service) => (
                <li key={service.id} className="flex items-center space-x-4 mt-2">
                  <input
                    type="checkbox"
                    id={`service-${service.id}`}
                    onChange={() => toggleServiceSelection(service)}
                    checked={!!selectedServices.find((s) => s.serviceId === service.id)}
                  />
                  <label htmlFor={`service-${service.id}`} className="flex-grow">
                    {service.name} - ${service.price}
                    {favoriteIds.includes(service.id) && (
                      <span className="text-red-500 font-semibold ml-2">(Favorito)</span>
                    )}
                  </label>

                  <input
                    type="number"
                    placeholder="Precio personalizado"
                    className="w-24 px-2 py-1 border rounded"
                    onChange={(e) => updateCustomPrice(service.id, e.target.value)}
                  />
                  <input
                    type="text"
                    placeholder="Notas"
                    className="w-48 px-2 py-1 border rounded"
                    onChange={(e) => updateNotes(service.id, e.target.value)}
                  />
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>

      {/* Botón para guardar */}
      <button
        onClick={handleSave}
        className="px-6 py-2 bg-blue-600 text-white rounded mt-6"
      >
        Guardar Historial Médico
      </button>
    </div>
  );
};

export default AddMedicalRecord;


Estructura: components
Archivo: ClientAppointments.js
--------------------------------------------------
import React, { useEffect, useState } from 'react';
import axiosInstance from '../config/axios';
import toast from 'react-hot-toast';
import Modal from '../components/common/Modal';

const ClientAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error] = useState('');
  const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [newDate, setNewDate] = useState('');
  const [newTime, setNewTime] = useState('');
  const [reason, setReason] = useState('');

  // Cargar citas del cliente
  const loadAppointments = async () => {
    try {
      setIsLoading(true);
      const response = await axiosInstance.get(
        '/client/appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=ASC'
      );
      if (response.data.success) {
        setAppointments(response.data.data.content);
      } else {
        toast.error('Error al cargar las citas');
      }
    } catch (error) {
      console.error('Error al cargar citas:', error);
      toast.error(error.response?.data?.error?.message || 'Error desconocido');
    } finally {
      setIsLoading(false);
    }
  };

  // Cancelar una cita
  const handleCancelAppointment = async (appointmentId) => {
    try {
      const response = await axiosInstance.post(`/client/appointments/${appointmentId}/cancel`);
      if (response.data.success) {
        toast.success('Cita cancelada exitosamente');
        loadAppointments();
      } else {
        toast.error('No se pudo cancelar la cita');
      }
    } catch (error) {
      console.error('Error al cancelar cita:', error);
      toast.error(error.response?.data?.error?.message || 'Error desconocido');
    }
  };

  const handleRescheduleAppointment = async (e) => {
    e.preventDefault();
    try {
      // Crear la fecha completa usando la fecha y hora seleccionadas
      const selectedDateTime = new Date(`${newDate}T${newTime}`);
      
      
  
      
  
      // Realizar la solicitud al backend
      const response = await axiosInstance.post(
        `/client/appointments/${selectedAppointment.id}/reschedule`,
        { newDate: selectedDateTime, reason }
      );
      if (response.data.success) {
        toast.success('Cita reprogramada exitosamente');
        handleCloseModal();
        loadAppointments();
      } else {
        toast.error('No se pudo reprogramar la cita');
      }
    } catch (error) {
      console.error('Error al reprogramar cita:', error);
      toast.error(error.response?.data?.error?.message || 'Error desconocido');
    }
  };
  

  const handleCloseModal = () => {
    setIsRescheduleModalOpen(false);
    setSelectedAppointment(null);
    setNewDate('');
    setNewTime('');
    setReason('');
  };

  useEffect(() => {
    loadAppointments();
  }, []);

  const renderAppointmentCard = (appointment) => (
    <div key={appointment.id} className="bg-white rounded-lg shadow-md p-4 mb-4">
      <h3 className="text-lg font-semibold">{appointment.pet.name}</h3>
      <p>
        Fecha: {new Date(appointment.appointmentDate).toLocaleDateString()}{' '}
        {new Date(appointment.appointmentDate).toLocaleTimeString()}
      </p>
      <p>Motivo: {appointment.reason}</p>
      <p>Veterinario: {appointment.veterinarianName}</p>
      {appointment.status === 'CANCELLED' ? (
        <p className="text-red-600 font-bold mt-4">CANCELADO</p>
      ) : (
        <div className="flex space-x-4 mt-4">
          {appointment.canCancel && (
            <button
              onClick={() => handleCancelAppointment(appointment.id)}
              className="px-4 py-2 bg-red-600 text-white rounded-md"
            >
              Cancelar
            </button>
          )}
          {appointment.canReschedule && (
            <button
              onClick={() => {
                setSelectedAppointment(appointment);
                setIsRescheduleModalOpen(true);
              }}
              className="px-4 py-2 bg-blue-600 text-white rounded-md"
            >
              Reprogramar
            </button>
          )}
        </div>
      )}
    </div>
  );


  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Mis Citas</h2>
      {isLoading ? (
        <p>Cargando citas...</p>
      ) : error ? (
        <div className="text-red-600">{error}</div>
      ) : (
        <div>{appointments.map(renderAppointmentCard)}</div>
      )}

      {/* Modal para reprogramar cita */}
      <Modal isOpen={isRescheduleModalOpen} onClose={handleCloseModal} title="Reprogramar Cita">
        <form onSubmit={handleRescheduleAppointment} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Nueva Fecha</label>
            <input
              type="date"
              value={newDate}
              onChange={(e) => setNewDate(e.target.value)}
              className="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Nueva Hora</label>
            <input
              type="time"
              value={newTime}
              onChange={(e) => setNewTime(e.target.value)}
              className="w-full px-3 py-2 border rounded-md"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Motivo</label>
            <textarea
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              rows="3"
              className="w-full px-3 py-2 border rounded-md"
              placeholder="Motivo para reprogramar la cita"
              required
            />
          </div>
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={handleCloseModal}
              className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md"
            >
              Cancelar
            </button>
            <button type="submit" className="px-4 py-2 text-white bg-blue-600 rounded-md">
              Reprogramar
            </button>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export default ClientAppointments;


Estructura: components
Archivo: Dashboard.js
--------------------------------------------------
// src/components/Dashboard.js
import React from 'react';

const Dashboard = () => {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold">Dashboard</h1>
      {/* Contenido del dashboard */}
    </div>
  );
};

export default Dashboard;

Estructura: components
Archivo: InventoryManagement.js
--------------------------------------------------
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Plus, AlertTriangle, X, Search } from 'lucide-react'; // Añadido Search aquí
import Table from '../components/common/Table/Table';
import axiosInstance from '../config/axios';
import toast from 'react-hot-toast';
import Modal from '../components/common/Modal';
import InventoryForm from './inventory/InventoryForm';

// Componente SearchBox
const SearchBox = ({ searchTerm, onSearchChange, onClear }) => (
  <div className="relative w-full max-w-md">
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder="Buscar productos..."
      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 
               bg-white placeholder-gray-500 focus:outline-none focus:ring-2 
               focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
    />
    {searchTerm && (
      <button
        onClick={onClear}
        className="absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <X className="h-4 w-4 text-gray-400 hover:text-gray-500" />
      </button>
    )}
  </div>
);

// Componente modal de formulario
const FormModal = ({ isOpen, onClose, title, initialData, onSubmit }) => {
  if (!isOpen) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={title}
    >
      <InventoryForm
        initialData={initialData}
        onSubmit={onSubmit}
        onCancel={onClose}
      />
    </Modal>
  );
};

// Componente principal
const InventoryManagement = () => {
  // Estados para los datos y configuración
  const [inventory, setInventory] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('ALL');
  const [alerts, setAlerts] = useState([]);
  const [isLoadingAlerts, setIsLoadingAlerts] = useState(false);

  // Estados para modales
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);

  // Estado para paginación
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0
  });

  // Estado para ordenamiento
  const [sortConfig, setSortConfig] = useState({
    sortBy: 'name',
    sortDirection: 'ASC'
  });

  // Referencia para el timeout de búsqueda
  const searchTimeoutRef = useRef(null);

  // Constantes para estados de productos
  const STATUS_OPTIONS = {
    ALL: 'Todos',
    IN_STOCK: 'En Stock',
    LOW_STOCK: 'Stock Bajo',
    OUT_OF_STOCK: 'Sin Stock'
  };

  // Función para cargar el inventario
  const loadInventory = useCallback(async () => {
    try {
      setIsLoading(true);

      // Construir parámetros base
      const params = {
        page: pagination.pageNumber,
        size: pagination.pageSize,
        sortBy: sortConfig.sortBy,
        sortDirection: sortConfig.sortDirection,
      };

      let response;
      if (searchTerm.trim() !== "") {
        // Llamada al endpoint de búsqueda
        response = await axiosInstance.get("/inventory/search", {
          params: { ...params, searchTerm },
        });
      } else {
        // Llamada al endpoint estándar
        response = await axiosInstance.get("/inventory", { params });
      }

      if (response.data.success) {
        setInventory(response.data.data.content || []);
        setPagination(prev => ({
          ...prev,
          totalElements: response.data.data.totalElements || 0,
          totalPages: response.data.data.totalPages || 0
        }));
      }
    } catch (error) {
      console.error('Error loading inventory:', error);
      toast.error('Error al cargar el inventario');
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, sortConfig, searchTerm]);

  // Función para cargar alertas
  const loadAlerts = useCallback(async () => {
    try {
      setIsLoadingAlerts(true);
      const response = await axiosInstance.get('/inventory/low-stock', {
        params: {
          page: 0,
          size: 10,
          sortBy: 'name',
          sortDirection: 'ASC'
        }
      });

      if (response.data.success) {
        setAlerts(response.data.data.content || []);
      }
    } catch (error) {
      console.error('Error fetching low stock items:', error);
      toast.error('Error al cargar alertas de stock bajo');
    } finally {
      setIsLoadingAlerts(false);
    }
  }, []);

  // Efectos para cargar datos iniciales
  useEffect(() => {
    loadInventory();
    loadAlerts();
  }, [loadInventory, loadAlerts]);

  // Manejadores de eventos
  const handleSubmitAdd = async (values) => {
    try {
      const response = await axiosInstance.post('/inventory/items', values);
      if (response.data.success) {
        toast.success('Producto agregado exitosamente');
        setIsAddModalOpen(false);
        loadInventory();
      }
    } catch (error) {
      toast.error('Error al agregar el producto');
      throw error; // Propagar el error para que el formulario lo maneje
    }
  };

  const handleSubmitEdit = async (values) => {
    try {
      const response = await axiosInstance.put(`/inventory/items/${selectedItem.id}`, values);
      if (response.data.success) {
        toast.success('Producto actualizado exitosamente');
        setIsEditModalOpen(false);
        loadInventory();
      }
    } catch (error) {
      toast.error('Error al actualizar el producto');
      throw error;
    }
  };

  const handleViewDetails = async (item) => {
    setSelectedItem(item);
    setIsViewModalOpen(true);
  };

  const handleEdit = (item) => {
    setSelectedItem(item);
    setIsEditModalOpen(true);
  };

  // Manejadores de búsqueda y filtros
  const handleSearchChange = useCallback((value) => {
    setSearchTerm(value);
    setPagination(prev => ({ ...prev, pageNumber: 0 }));
    
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    
    // Solo hacer la búsqueda si hay un término de búsqueda
    if (value.trim()) {
      searchTimeoutRef.current = setTimeout(() => loadInventory(), 200);
    } else {
      // Si el término de búsqueda está vacío, cargar todos los productos
      loadInventory();
    }
  }, [loadInventory]);

  const handleSearchClear = () => {
    setSearchTerm('');
    setPagination(prev => ({ ...prev, pageNumber: 0 }));
    loadInventory();
  };

  // Componente para las alertas de stock bajo
  const LowStockAlerts = () => {
    if (isLoadingAlerts) {
      return <div className="mb-6 p-4 bg-gray-50">Cargando alertas...</div>;
    }

    if (alerts.length === 0) return null;

    return (
      <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <h3 className="flex items-center text-yellow-800 font-medium mb-2">
          <AlertTriangle className="w-5 h-5 mr-2" />
          Alertas de stock bajo
        </h3>
        <ul className="space-y-2">
          {alerts.map((item) => (
            <li key={item.id} className="text-yellow-700">
              {item.productName} - Quedan {item.currentStock} unidades (Mínimo: {item.minThreshold})
              {item.status === 'CRITICAL' && (
                <span className="ml-2 text-red-600 font-bold">(CRÍTICO)</span>
              )}
            </li>
          ))}
        </ul>
      </div>
    );
  };

  // Componente para el modal de visualización
  const ViewModal = ({ isOpen, onClose, item }) => {
    if (!isOpen || !item) return null;

    return (
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title="Detalles del Producto"
      >
        <div className="space-y-4">
          <div>
            <h3 className="font-medium text-gray-500">ID</h3>
            <p>{item.id}</p>
          </div>
          <div>
            <h3 className="font-medium text-gray-500">Nombre del producto</h3>
            <p>{item.name}</p>
          </div>
          <div>
            <h3 className="font-medium text-gray-500">Cantidad actual</h3>
            <p>{item.quantity}</p>
          </div>
          <div>
            <h3 className="font-medium text-gray-500">Cantidad mínima</h3>
            <p>{item.minThreshold}</p>
          </div>
          <div>
            <h3 className="font-medium text-gray-500">Precio</h3>
            <p>${item.price}</p>
          </div>
          <div>
            <h3 className="font-medium text-gray-500">Fecha de actualización</h3>
            <p>{new Date(item.lastUpdated).toLocaleDateString()}</p>
          </div>
          <button
            onClick={onClose}
            className="w-full mt-4 px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200"
          >
            Cerrar
          </button>
        </div>
      </Modal>
    );
  };

  // Definición de columnas para la tabla
  const columns = [
    { 
      key: 'name',
      label: 'Producto',
      sortable: true
    },
    {
      key: 'quantity',
      label: 'Cantidad',
      sortable: true
    },
    {
      key: 'status',
      label: 'Estado',
      render: (row) => {
        const getStatusColor = (quantity, minThreshold) => {
          if (quantity <= 0) return 'text-red-600 bg-red-100';
          if (quantity <= minThreshold) return 'text-yellow-600 bg-yellow-100';
          return 'text-green-600 bg-green-100';
        };

        const getStatusText = (quantity, minThreshold) => {
          if (quantity <= 0) return 'Sin Stock';
          if (quantity <= minThreshold) return 'Stock Bajo';
          return 'En Stock';
        };

        return (
          <span className={`px-2 py-1 rounded-full ${getStatusColor(row.quantity, row.minThreshold)}`}>
            {getStatusText(row.quantity, row.minThreshold)}
          </span>
        );
      }
    },
    {
      key: 'price',
      label: 'Precio',
      render: (row) => `$${row.price}`
    },
    {
      key: 'actions',
      label: 'Acciones',
      render: (row) => (
        <div className="flex space-x-2">
          <button
            onClick={() => handleViewDetails(row)}
            className="px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded-md hover:bg-purple-200"
          >
            Ver
          </button>
          <button
            onClick={() => handleEdit(row)}
            className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200"
          >
            Editar
          </button>
        </div>
      )
    }
  ];

  return (
    <div className="p-6">
      {/* Encabezado */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Gestión de Inventario</h1>
        <button
          onClick={() => setIsAddModalOpen(true)}
          className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 flex items-center"
        >
          <Plus className="w-5 h-5 mr-2" />
          Agregar producto
        </button>
      </div>

      {/* Alertas de stock bajo */}
      <LowStockAlerts />

      {/* Filtros */}
      <div className="mb-6 flex gap-4">
        <SearchBox
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          onClear={handleSearchClear}
        />
        <select
          value={selectedStatus}
          onChange={(e) => setSelectedStatus(e.target.value)}
          className="px-4 py-2 border rounded-md"
        >
          {Object.entries(STATUS_OPTIONS).map(([value, label]) => (
            <option key={value} value={value}>{label}</option>
          ))}
        </select>
      </div>

      {/* Tabla */}
      <Table
        columns={columns}
        data={inventory}
        pagination={pagination}
        onPageChange={(newPage) => setPagination(prev => ({ ...prev, pageNumber: newPage }))}
        onSort={(key) => setSortConfig(prev => ({
          sortBy: key,
          sortDirection: prev.sortBy === key && prev.sortDirection === 'ASC' ? 'DESC' : 'ASC'
        }))}
        isLoading={isLoading}
      />

      {/* Modales */}
      <FormModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        title="Agregar Producto"
        onSubmit={handleSubmitAdd}
      />

      <FormModal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Editar Producto"
        initialData={selectedItem}
        onSubmit={handleSubmitEdit}
      />

      <ViewModal
        isOpen={isViewModalOpen}
        onClose={() => setIsViewModalOpen(false)}
        item={selectedItem}
      />
      {/* Estilos CSS personalizados para la paginación */}
      <style jsx>{`
        .pagination-button {
          padding: 0.5rem 1rem;
          margin: 0 0.25rem;
          border: 1px solid #e2e8f0;
          border-radius: 0.375rem;
          background-color: white;
          color: #4a5568;
          transition: all 0.2s;
        }

        .pagination-button:hover {
          background-color: #f7fafc;
        }

        .pagination-button:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .pagination-button.active {
          background-color: #9f7aea;
          color: white;
          border-color: #9f7aea;
        }

        .table-container {
          box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
          border-radius: 0.5rem;
          overflow: hidden;
        }

        .alert-badge {
          display: inline-flex;
          align-items: center;
          padding: 0.25rem 0.75rem;
          border-radius: 9999px;
          font-size: 0.875rem;
          font-weight: 500;
          line-height: 1.25rem;
        }

        .alert-badge.warning {
          background-color: #fef3c7;
          color: #92400e;
        }

        .alert-badge.danger {
          background-color: #fee2e2;
          color: #b91c1c;
        }

        .alert-badge.success {
          background-color: #d1fae5;
          color: #047857;
        }

        .modal-overlay {
          background-color: rgba(0, 0, 0, 0.5);
          transition: opacity 0.2s ease-in-out;
        }

        .modal-content {
          transform: scale(0.95);
          opacity: 0;
          transition: all 0.2s ease-in-out;
        }

        .modal-content.open {
          transform: scale(1);
          opacity: 1;
        }

        .hover-trigger .hover-target {
          display: none;
        }

        .hover-trigger:hover .hover-target {
          display: block;
        }
      `}</style>

      {/* Scripts adicionales para funcionalidades específicas */}
      <script>{`
        // Función para formato de números
        function formatNumber(number) {
          return new Intl.NumberFormat('es-ES', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          }).format(number);
        }

        // Función para formateo de fechas
        function formatDate(date) {
          return new Intl.DateTimeFormat('es-ES', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          }).format(new Date(date));
        }

        // Función para validación de campos numéricos
        function validateNumberInput(input) {
          const value = input.value;
          const numberValue = parseFloat(value);
          
          if (isNaN(numberValue) || numberValue < 0) {
            input.setCustomValidity('Por favor ingrese un número válido mayor o igual a 0');
          } else {
            input.setCustomValidity('');
          }
          
          input.reportValidity();
        }

        // Función para manejar la confirmación de acciones críticas
        function confirmAction(message, callback) {
          if (window.confirm(message)) {
            callback();
          }
        }
      `}</script>
    </div>
  );
};

export default InventoryManagement;

Estructura: components
Archivo: Login.js
--------------------------------------------------
// src/components/Login.js
import React, { useState } from 'react'; // Añadido useState
import { useNavigate, Link } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useAuth } from '../context/AuthContext';
import authService from '../services/authService'; // Importación correcta
import toast from 'react-hot-toast';

const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [loginError, setLoginError] = useState('');

  // Esquema de validación con Yup
  const validationSchema = Yup.object({
    email: Yup.string()
      .email('Correo electrónico inválido')
      .required('El correo electrónico es requerido'),
    password: Yup.string()
      .required('La contraseña es requerida')
      .min(6, 'La contraseña debe tener al menos 6 caracteres')
  });

  const formik = useFormik({
    initialValues: {
      email: '',
      password: ''
    },
    validationSchema,
    onSubmit: async (values) => {
      setIsLoading(true);
      setLoginError(''); // Limpiar error anterior
      
      try {
        const response = await authService.login(values);
        login(response.user, response.token);
        toast.success('¡Inicio de sesión exitoso!');
        navigate('/dashboard');
      } catch (error) {
        let errorMessage = 'Ha ocurrido un error al iniciar sesión';
        
        // Manejar errores específicos
        switch (error.code) {
          case 'AUTH_ERROR':
            errorMessage = 'Correo electrónico o contraseña incorrectos';
            break;
          case 'NETWORK_ERROR':
            errorMessage = 'No se pudo conectar con el servidor. Por favor, verifica tu conexión.';
            break;
          default:
            errorMessage = error.message || 'Ha ocurrido un error inesperado';
        }
        
        setLoginError(errorMessage);
        toast.error(errorMessage, {
          duration: 4000,
          position: 'top-right',
          style: {
            background: '#363636',
            color: '#fff',
          },
        });
      } finally {
        setIsLoading(false);
      }
    }
  });

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-md">
        {/* Logo */}
        <div className="flex justify-center">
          <img src="/logo.png" alt="PurplePaw" className="h-20 w-auto" />
        </div>

        {/* Título */}
        <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
          Iniciar Sesión - SPRINT  4
        </h2>

        {/* Formulario */}
        <form className="mt-8 space-y-6" onSubmit={formik.handleSubmit}>
          <div className="space-y-4">
            {/* Campo de Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Correo Electrónico
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  {...formik.getFieldProps('email')}
                  className={`appearance-none block w-full px-3 py-2 border 
                    ${formik.touched.email && formik.errors.email 
                      ? 'border-red-300' 
                      : 'border-gray-300'} 
                    rounded-md shadow-sm placeholder-gray-400 
                    focus:outline-none focus:ring-purple-500 focus:border-purple-500`}
                />
                {formik.touched.email && formik.errors.email && (
                  <p className="mt-2 text-sm text-red-600">{formik.errors.email}</p>
                )}
              </div>
            </div>

            {/* Campo de Contraseña */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Contraseña
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  {...formik.getFieldProps('password')}
                  className={`appearance-none block w-full px-3 py-2 border 
                    ${formik.touched.password && formik.errors.password 
                      ? 'border-red-300' 
                      : 'border-gray-300'} 
                    rounded-md shadow-sm placeholder-gray-400 
                    focus:outline-none focus:ring-purple-500 focus:border-purple-500`}
                />
                {formik.touched.password && formik.errors.password && (
                  <p className="mt-2 text-sm text-red-600">{formik.errors.password}</p>
                )}
              </div>
            </div>
          </div>

          {/* Botón de Submit */}
          <button
            type="submit"
            disabled={isLoading}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md
              shadow-sm text-sm font-medium text-white bg-[#C792DF] 
              hover:bg-[#b36ed3] focus:outline-none focus:ring-2 
              focus:ring-offset-2 focus:ring-[#C792DF] transition-colors
              ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {isLoading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
          </button>

          {/* Link a Registro */}
          <div className="text-center mt-4">
            <p className="text-sm text-gray-600">
              ¿No tienes una cuenta?{' '}
              <Link to="/register" className="font-medium text-[#C792DF] hover:text-[#b36ed3]">
                Regístrate aquí
              </Link>
            </p>
          </div>
        </form>
        {loginError && (
          <div className="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg flex items-center" role="alert">
            <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            {loginError}
          </div>
        )}
      </div>
    </div>
  );
};

export default Login;

Estructura: components
Archivo: MyPets.js
--------------------------------------------------
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import authService from '../services/authService';
import toast from 'react-hot-toast';
import Modal from '../components/common/Modal';
import ScheduleAppointment from '../components/ScheduleAppointment';
import { useAuth } from '../context/AuthContext';
import { Calendar, Clock, PlusCircle } from 'lucide-react';

const MyPets = () => {
  // Estados para gestión de mascotas
  const [pets, setPets] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  
  // Estados para modales
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedPet, setSelectedPet] = useState(null);
  const [formData, setFormData] = useState({ name: '', species: '', breed: '', age: '' });
  
  // Estados para programación de citas
  const [isSchedulingModalOpen, setIsSchedulingModalOpen] = useState(false);

  // Hooks
  const navigate = useNavigate();
  const { user } = useAuth();

  // Cargar mascotas del usuario
  useEffect(() => {
    const loadUserPets = async () => {
      setIsLoading(true);
      const token = authService.getToken();
      if (!token) {
        toast.error("No se encontró el token de autenticación.");
        setIsLoading(false);
        return;
      }
      try {
        const response = await axios.get(`http://localhost:8080/api/pets/me`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        if (response.data.success) {
          setPets(response.data.data);
        } else {
          setError('No se encontraron mascotas para este usuario.');
        }
      } catch (error) {
        console.error('Error al cargar mascotas:', error);
        setError('Error al cargar las mascotas del usuario');
      } finally {
        setIsLoading(false);
      }
    };
    loadUserPets();
  }, []);

  // Manejadores de mascotas
  const handleAddPet = async (e) => {
    e.preventDefault();
    try {
      const token = authService.getToken();
      const response = await axios.post(`http://localhost:8080/api/pets`, formData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.data.success) {
        setPets([...pets, response.data.data]);
        toast.success('Mascota agregada exitosamente');
        setIsAddModalOpen(false);
      }
    } catch (error) {
      console.error('Error al agregar mascota:', error);
      toast.error('Error al agregar la mascota');
    }
  };

  const handleEditPet = async (e) => {
    e.preventDefault();
    try {
      const token = authService.getToken();
      const response = await axios.put(`http://localhost:8080/api/pets/${selectedPet.id}`, formData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.data.success) {
        setPets(pets.map((pet) => (pet.id === selectedPet.id ? response.data.data : pet)));
        toast.success('Mascota editada exitosamente');
        setIsEditModalOpen(false);
      }
    } catch (error) {
      console.error('Error al editar mascota:', error);
      toast.error('Error al editar la mascota');
    }
  };

  const openEditModal = (pet) => {
    setSelectedPet(pet);
    setFormData({ name: pet.name, species: pet.species, breed: pet.breed, age: pet.age });
    setIsEditModalOpen(true);
  };

  // Manejadores de navegación y visualización
  const handleViewHistory = (petId) => {
    navigate(`/pets/${petId}/history`);
  };

  const handleScheduleAppointment = (pet) => {
    setSelectedPet(pet);
    setIsSchedulingModalOpen(true);
  };

  const handleSchedulingSuccess = () => {
    setIsSchedulingModalOpen(false);
    toast.success('Cita agendada exitosamente');
  };

  // Renderizado de tarjeta de mascota
  const renderPetCard = (pet) => (
    <div key={pet.id} className="bg-white rounded-lg border shadow-sm p-4">
      <h4 className="text-lg font-semibold text-gray-900">{pet.name}</h4>
      <p className="text-sm text-gray-500">
        {pet.species} ({pet.breed}) - {pet.age} años
      </p>
      <div className="mt-4 space-y-2">
        <button
          onClick={() => handleViewHistory(pet.id)}
          className="w-full px-4 py-2 bg-blue-100 text-blue-700 rounded-md"
        >
          <Clock className="w-4 h-4 mr-2 inline" />
          Ver Historial
        </button>
        <button
          onClick={() => handleScheduleAppointment(pet)}
          className="w-full px-4 py-2 bg-purple-100 text-purple-700 rounded-md"
        >
          <Calendar className="w-4 h-4 mr-2 inline" />
          Agendar Cita
        </button>
        <button
          onClick={() => openEditModal(pet)}
          className="w-full px-4 py-2 bg-yellow-100 text-yellow-700 rounded-md"
        >
          <PlusCircle className="w-4 h-4 mr-2 inline" />
          Editar
        </button>
      </div>
    </div>
  );

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Mis Mascotas</h2>
        <button
          className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          onClick={() => {
            setFormData({ name: '', species: '', breed: '', age: '' });
            setIsAddModalOpen(true);
          }}
        >
          Agregar Mascota
        </button>
      </div>

      {isLoading ? (
        <p className="text-gray-500">Cargando mascotas...</p>
      ) : error ? (
        <div className="text-red-600">{error}</div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {pets.map(renderPetCard)}
        </div>
      )}

      {/* Modal para agregar mascota */}
      <Modal isOpen={isAddModalOpen} title="Agregar Mascota" onClose={() => setIsAddModalOpen(false)}>
        <form onSubmit={handleAddPet} className="space-y-4">
          <input
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="Nombre"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.species}
            onChange={(e) => setFormData({ ...formData, species: e.target.value })}
            placeholder="Especie"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.breed}
            onChange={(e) => setFormData({ ...formData, breed: e.target.value })}
            placeholder="Raza"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.age}
            onChange={(e) => setFormData({ ...formData, age: e.target.value })}
            placeholder="Edad"
            type="number"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <button type="submit" className="w-full px-4 py-2 bg-green-600 text-white rounded-md">
            Guardar
          </button>
        </form>
      </Modal>

      {/* Modal para editar mascota */}
      <Modal isOpen={isEditModalOpen} title="Editar Mascota" onClose={() => setIsEditModalOpen(false)}>
        <form onSubmit={handleEditPet} className="space-y-4">
          <input
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="Nombre"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.species}
            onChange={(e) => setFormData({ ...formData, species: e.target.value })}
            placeholder="Especie"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.breed}
            onChange={(e) => setFormData({ ...formData, breed: e.target.value })}
            placeholder="Raza"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <input
            value={formData.age}
            onChange={(e) => setFormData({ ...formData, age: e.target.value })}
            placeholder="Edad"
            type="number"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
          <button type="submit" className="w-full px-4 py-2 bg-yellow-600 text-white rounded-md">
            Actualizar
          </button>
        </form>
      </Modal>

      {/* Modal de agendamiento */}
      {isSchedulingModalOpen && selectedPet && (
        <Modal
          isOpen={isSchedulingModalOpen}
          onClose={() => setIsSchedulingModalOpen(false)}
          title={`Agendar Cita para ${selectedPet.name}`}
        >
          <ScheduleAppointment
            petId={selectedPet.id}
            clientId={user.uid}
            onSuccess={handleSchedulingSuccess}
            onCancel={() => setIsSchedulingModalOpen(false)}
          />
        </Modal>
      )}
    </div>
  );
};

export default MyPets;

Estructura: components
Archivo: MyProfile.js
--------------------------------------------------
import React, { useState, useEffect, useCallback } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { User } from 'lucide-react';
import toast from 'react-hot-toast';
import axiosInstance from '../config/axios';

const MyProfile = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState(null);

  // Esquema de validación
  const validationSchema = Yup.object({
    nombre: Yup.string()
      .required('Name is required')
      .min(2, 'Name must be at least 2 characters'),
    apellido: Yup.string()
      .required('Last name is required')
      .min(2, 'Last name must be at least 2 characters'),
    telefono: Yup.string()
      .required('Phone number is required')
      .matches(/^\d{10}$/, 'Phone number must be exactly 10 digits'),
    direccion: Yup.string()
      .required('Address is required')
      .min(5, 'Address must be at least 5 characters')
  });

  // Configurar Formik
  const formik = useFormik({
    initialValues: {
      nombre: '',
      apellido: '',
      telefono: '',
      direccion: ''
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const response = await axiosInstance.put('/users/me', {
          nombre: values.nombre,
          apellido: values.apellido,
          telefono: values.telefono,
          direccion: values.direccion
        });

        if (response.data.success) {
          // Actualizar el estado local con los datos de respuesta
          setUser(response.data.data);
          toast.success('Profile updated successfully');
        }
      } catch (error) {
        console.error('Update error:', error);
        toast.error(error.response?.data?.error?.message || 'Error updating profile');
      }
    }
  });

  // Cargar datos del usuario
  const fetchUserProfile = useCallback(async () => {
    try {
      const response = await axiosInstance.get('/users/me');

      if (response.data.success) {
        const userData = response.data.data;
        setUser(userData);
        formik.setValues({
          nombre: userData.nombre || '',
          apellido: userData.apellido || '',
          telefono: userData.telefono || '',
          direccion: userData.direccion || ''
        });
      }
    } catch (error) {
      console.error('Fetch error:', error);
      toast.error(error.response?.data?.error?.message || 'Error loading profile');
    } finally {
      setIsLoading(false);
    }
  }, [formik]); // formik como dependencia de useCallback

  useEffect(() => {
    fetchUserProfile();
  }, [fetchUserProfile]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center space-x-4 mb-8">
        <div className="bg-purple-100 p-3 rounded-full">
          <User className="h-8 w-8 text-purple-600" />
        </div>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">My Profile</h1>
          <p className="text-gray-500">{user?.email}</p>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white shadow rounded-lg p-8">
        <form onSubmit={formik.handleSubmit} className="space-y-6">
          {/* Nombre y Apellido */}
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                First Name
              </label>
              <input
                type="text"
                name="nombre"
                {...formik.getFieldProps('nombre')}
                className={`
                  w-full px-4 py-3 rounded-md
                  border border-gray-300 
                  focus:ring-2 focus:ring-purple-500 focus:border-purple-500
                  ${formik.touched.nombre && formik.errors.nombre ? 'border-red-300' : ''}
                `}
              />
              {formik.touched.nombre && formik.errors.nombre && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.nombre}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Last Name
              </label>
              <input
                type="text"
                name="apellido"
                {...formik.getFieldProps('apellido')}
                className={`
                  w-full px-4 py-3 rounded-md
                  border border-gray-300 
                  focus:ring-2 focus:ring-purple-500 focus:border-purple-500
                  ${formik.touched.apellido && formik.errors.apellido ? 'border-red-300' : ''}
                `}
              />
              {formik.touched.apellido && formik.errors.apellido && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.apellido}</p>
              )}
            </div>
          </div>

          {/* Teléfono */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phone Number
            </label>
            <input
              type="tel"
              name="telefono"
              {...formik.getFieldProps('telefono')}
              className={`
                w-full px-4 py-3 rounded-md
                border border-gray-300 
                focus:ring-2 focus:ring-purple-500 focus:border-purple-500
                ${formik.touched.telefono && formik.errors.telefono ? 'border-red-300' : ''}
              `}
            />
            {formik.touched.telefono && formik.errors.telefono && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.telefono}</p>
            )}
          </div>

          {/* Dirección */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Address
            </label>
            <input
              type="text"
              name="direccion"
              {...formik.getFieldProps('direccion')}
              className={`
                w-full px-4 py-3 rounded-md
                border border-gray-300 
                focus:ring-2 focus:ring-purple-500 focus:border-purple-500
                ${formik.touched.direccion && formik.errors.direccion ? 'border-red-300' : ''}
              `}
            />
            {formik.touched.direccion && formik.errors.direccion && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.direccion}</p>
            )}
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={formik.isSubmitting || !formik.dirty || !formik.isValid}
              className={`
                px-6 py-3 rounded-md text-white
                ${formik.isSubmitting || !formik.dirty || !formik.isValid
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-purple-600 hover:bg-purple-700'}
                transition-colors duration-200 
                focus:outline-none focus:ring-2 focus:ring-purple-500
              `}
            >
              {formik.isSubmitting ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </form>
      </div>

      {/* Role Badge */}
      <div className="mt-6 flex justify-end">
        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
          {user?.roles[0]}
        </span>
      </div>
    </div>
  );
};

export default MyProfile;

Estructura: components
Archivo: PaymentDetails.js
--------------------------------------------------
import React, { useEffect, useState } from 'react';
import { fetchPaymentDetails } from '../api/paymentHistoryApi';
import { useParams } from 'react-router-dom';
import toast from 'react-hot-toast';

const PaymentDetails = () => {
  const { paymentId } = useParams();
  const [payment, setPayment] = useState(null);

  useEffect(() => {
    const loadPaymentDetails = async () => {
      try {
        const response = await fetchPaymentDetails(paymentId);
        setPayment(response.data.data);
        toast.success('Detalles cargados');
      } catch (error) {
        toast.error('Error al cargar detalles');
      }
    };

    loadPaymentDetails();
  }, [paymentId]);

  if (!payment) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Detalles del Pago</h1>
      <p><strong>Fecha:</strong> {payment.fechaVisita}</p>
      <p><strong>Servicio:</strong> {payment.serviceName}</p>
      <p><strong>Mascota:</strong> {payment.petName}</p>
      <p><strong>Monto:</strong> ${payment.montoTotal}</p>
      <p><strong>Notas:</strong> {payment.notas}</p>
    </div>
  );
};

export default PaymentDetails;


Estructura: components
Archivo: PaymentHistory.js
--------------------------------------------------
import React, { useState, useEffect, useCallback } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import toast from 'react-hot-toast';
import axios from '../config/axios';

const PaymentHistory = () => {
  const [payments, setPayments] = useState([]);
  const [summary, setSummary] = useState(null);
  const [filters, setFilters] = useState({
    startDate: null,
    endDate: null,
    petId: '',
    montoMinimo: '',
    montoMaximo: '',
    page: 0,
    size: 10,
    sortBy: 'fechaVisita',
    sortDirection: 'DESC',
  });
  const [isLoading, setIsLoading] = useState(false);

  // Función para cargar historial de pagos
  const loadPayments = useCallback(async () => {
    setIsLoading(true);
    try {
      const params = {
        page: filters.page,
        size: filters.size,
        sortBy: filters.sortBy,
        sortDirection: filters.sortDirection,
        ...(filters.startDate && { fechaInicio: filters.startDate.toISOString().split('T')[0] }),
        ...(filters.endDate && { fechaFin: filters.endDate.toISOString().split('T')[0] }),
        ...(filters.petId && { petId: filters.petId }),
        ...(filters.montoMinimo && { montoMinimo: filters.montoMinimo }),
        ...(filters.montoMaximo && { montoMaximo: filters.montoMaximo }),
      };

      const response = await axios.get('/payment-history', { params });
      const paymentsData = response.data.data.content || [];

      const formattedPayments = paymentsData.map((payment) => {
        const servicios = payment.serviciosRealizados.map((servicio) => ({
          serviceName: servicio.nombre,
          servicePrice: servicio.precioBase || 0,
          customPrice: servicio.precioPersonalizado || null,
          notes: servicio.notas || '',
        }));

        const adicionales = payment.serviciosAdicionales.map((adicional) => ({
          serviceName: adicional.descripcion,
          servicePrice: adicional.precio || 0,
          notes: adicional.notas || '',
        }));

        return {
          id: payment.id,
          fecha: new Date(payment.fecha).toLocaleString(),
          petName: payment.petName,
          montoTotal: payment.montoTotal,
          servicios: [...servicios, ...adicionales],
          razon: payment.razon,
          veterinarioNombre: payment.veterinarioNombre,
        };
      });

      setPayments(formattedPayments);
      toast.success('Pagos cargados con éxito');
    } catch (error) {
      toast.error('Error al cargar el historial de pagos');
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  }, [filters]);

  const fetchPaymentSummary = async (startDate, endDate) => {
    const params = { fechaInicio: startDate, fechaFin: endDate };
    return axios.get('/payment-history/summary', { params });
  };
  
  const loadSummary = useCallback(async () => {
    if (filters.startDate && filters.endDate) {
      try {
        const response = await fetchPaymentSummary(
          filters.startDate.toISOString().split('T')[0],
          filters.endDate.toISOString().split('T')[0]
        );
  
        const summaryData = response.data.data || {
          totalGastado: 0,
          gastosPorMascota: {},
          gastosPorServicio: {},
        };
  
        // Actualizar el estado con los datos del resumen
        setSummary({
          totalGastado: summaryData.totalGastado || 0,
          gastosPorMascota: summaryData.gastosPorMascota || {},
          gastosPorServicio: summaryData.gastosPorServicio || {},
        });
      } catch (error) {
        console.error("Error al cargar el resumen de pagos:", error);
        setSummary({ totalGastado: 0, gastosPorMascota: {}, gastosPorServicio: {} });
      }
    }
  }, [filters]);
  

  useEffect(() => {
    loadPayments();
    loadSummary();
  }, [loadPayments, loadSummary]);

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Historial de Pagos</h1>

      {/* Filtros */}
      <div className="flex flex-wrap gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium">Inicio</label>
          <DatePicker
            selected={filters.startDate}
            onChange={(date) => setFilters({ ...filters, startDate: date })}
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Fin</label>
          <DatePicker
            selected={filters.endDate}
            onChange={(date) => setFilters({ ...filters, endDate: date })}
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Mascota</label>
          <input
            type="text"
            value={filters.petId}
            onChange={(e) => setFilters({ ...filters, petId: e.target.value })}
            placeholder="ID de mascota"
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Monto Mínimo</label>
          <input
            type="number"
            value={filters.montoMinimo}
            onChange={(e) => setFilters({ ...filters, montoMinimo: e.target.value })}
            placeholder="0.00"
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Monto Máximo</label>
          <input
            type="number"
            value={filters.montoMaximo}
            onChange={(e) => setFilters({ ...filters, montoMaximo: e.target.value })}
            placeholder="0.00"
            className="border rounded px-3 py-2"
          />
        </div>
        <button
          onClick={loadPayments}
          className="bg-purple-600 text-white px-4 py-2 rounded"
        >
          Buscar
        </button>
      </div>

      {/* Tabla de Pagos */}
      {isLoading ? (
        <div className="text-center">Cargando...</div>
      ) : payments.length > 0 ? (
        <table className="min-w-full border border-gray-200 mb-4">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-2">Fecha</th>
              <th className="px-4 py-2">Servicios</th>
              <th className="px-4 py-2">Mascota</th>
              <th className="px-4 py-2">Monto</th>
            </tr>
          </thead>
          <tbody>
            {payments.map((payment) => (
              <tr key={payment.id} className="border-t">
                <td className="px-4 py-2">{payment.fecha}</td>
                <td className="px-4 py-2">
                  {payment.servicios.map((servicio, index) => (
                    <div key={index}>
                      {servicio.serviceName} - $
                      {servicio.servicePrice || servicio.customPrice || 0}{' '}
                      <span className="text-gray-500 text-sm">
                        ({servicio.notes || 'Sin notas'})
                      </span>
                    </div>
                  ))}
                </td>
                <td className="px-4 py-2">{payment.petName}</td>
                <td className="px-4 py-2">${payment.montoTotal}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div className="text-center text-gray-500">No se encontraron pagos</div>
      )}

      {/* Resumen */}
      {summary ? (
        <div className="p-4 bg-gray-50 rounded shadow">
          <h3 className="text-lg font-medium mb-2">Resumen de Pagos</h3>
          <p><strong>Total Pagado:</strong> ${summary.totalGastado.toFixed(2)}</p>

          {Object.keys(summary.gastosPorMascota).length > 0 && (
            <div className="mt-4">
              <h4 className="text-md font-medium">Gastos por Mascota:</h4>
              <ul className="list-disc list-inside">
                {Object.entries(summary.gastosPorMascota).map(([mascotaId, monto]) => (
                  <li key={mascotaId}>
                    {mascotaId}: ${monto.toFixed(2)}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {Object.keys(summary.gastosPorServicio).length > 0 && (
            <div className="mt-4">
              <h4 className="text-md font-medium">Gastos por Servicio:</h4>
              <ul className="list-disc list-inside">
                {Object.entries(summary.gastosPorServicio).map(([servicio, monto]) => (
                  <li key={servicio}>
                    {servicio}: ${monto.toFixed(2)}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center text-gray-500">
          No hay datos disponibles para el resumen.
        </div>
      )}

    </div>
  );
};

export default PaymentHistory;


Estructura: components
Archivo: PetMedicalHistory.js
--------------------------------------------------
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import axiosInstance from '../config/axios';
import toast from 'react-hot-toast';
import { format } from 'date-fns';
import Modal from '../components/common/Modal/Modal';

const PetMedicalHistory = () => {
  const [historial, setHistorial] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [petName, setPetName] = useState('');
  
  const { petId } = useParams();
  const navigate = useNavigate();

  const loadHistorial = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await axiosInstance.get(`/historial-clinico/mascota/${petId}`);
      console.log('Datos recibidos del backend:', response.data);
      
      if (response.data.success) {
        setHistorial(response.data.data.map(record => ({
          ...record,
          serviciosRealizados: record.serviciosRealizados || [],
        })));
        if (response.data.data.length > 0) {
          setPetName(response.data.data[0].petName);
        }
      }
    } catch (error) {
      console.error('Error cargando historial:', error);
      toast.error('Error al cargar el historial clínico');
    } finally {
      setIsLoading(false);
    }
  }, [petId]);
  
  

  useEffect(() => {
    loadHistorial();
  }, [loadHistorial]);

  const RecordDetailsModal = () => (
    <Modal
      isOpen={isModalOpen}
      onClose={() => setIsModalOpen(false)}
      title="Detalles de la Consulta"
    >
      <div className="space-y-6 max-w-2xl">
        {/* Detalles básicos */}
        <div>
          <h4 className="text-sm font-medium text-gray-500">Fecha de Visita</h4>
          <p className="mt-1">{format(new Date(selectedRecord.fechaVisita), 'dd/MM/yyyy HH:mm')}</p>
        </div>
  
        <div>
          <h4 className="text-sm font-medium text-gray-500">Veterinario</h4>
          <p className="mt-1">{selectedRecord.veterinarianName}</p>
        </div>
  
        <div>
          <h4 className="text-sm font-medium text-gray-500">Motivo de Consulta</h4>
          <p className="mt-1">{selectedRecord.motivoConsulta}</p>
        </div>
  
        <div>
          <h4 className="text-sm font-medium text-gray-500">Diagnóstico</h4>
          <p className="mt-1">{selectedRecord.diagnostico}</p>
        </div>
  
        <div>
          <h4 className="text-sm font-medium text-gray-500">Tratamiento</h4>
          <p className="mt-1">{selectedRecord.tratamiento}</p>
        </div>
  
        {selectedRecord.observaciones && (
          <div>
            <h4 className="text-sm font-medium text-gray-500">Observaciones</h4>
            <p className="mt-1">{selectedRecord.observaciones}</p>
          </div>
        )}
  
        {/* Servicios realizados */}
        <div>
          <h4 className="text-sm font-medium text-gray-500">Servicios Realizados</h4>
          <ul className="mt-2 space-y-2">
            {selectedRecord.serviciosRealizados.map((servicio, index) => (
              <li key={index} className="border-b border-gray-200 pb-2">
                <div className="flex justify-between items-center">
                  {/* Mostrar el nombre del servicio */}
                  <p className="text-sm text-gray-700 font-medium">{servicio.serviceName}</p>
                  {/* Mostrar el precio personalizado o el precio base */}
                  <p className="text-sm text-gray-500">
                    ${servicio.precioPersonalizado || servicio.precioBase || 'No especificado'}
                  </p>
                </div>
                {/* Mostrar las notas, si existen */}
                {servicio.notas && (
                  <p className="mt-1 text-sm text-gray-500">Notas: {servicio.notas}</p>
                )}
              </li>
            ))}
          </ul>
        </div>

  
        {/* Botón para cerrar */}
        <button
          onClick={() => setIsModalOpen(false)}
          className="w-full mt-6 px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
        >
          Cerrar
        </button>
      </div>
    </Modal>
  );
  
  

  return (
    <div className="p-6">
      {/* Header con navegación */}
      <div className="flex items-center space-x-4 mb-6">
        <button
          onClick={() => navigate(-1)}
          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <ArrowLeft className="h-6 w-6 text-gray-600" />
        </button>
        <h1 className="text-2xl font-bold text-gray-900">
          Historial Clínico de la Mascota - {petName}
        </h1>
      </div>

      {/* Tabla simple */}
      {isLoading ? (
        <div className="flex justify-center items-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
        </div>
      ) : historial.length === 0 ? (
        <div className="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
          <p className="text-gray-500">No hay registros médicos disponibles</p>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Fecha
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Veterinario
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Motivo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {historial.map((record) => (
                <tr key={record.id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {format(new Date(record.fechaVisita), 'dd/MM/yyyy')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {record.veterinarianName}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {record.motivoConsulta.substring(0, 50)}...
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 rounded-full text-sm
                      ${record.estado === 'ACTIVO' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}
                    >
                      {record.estado}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <button
                      onClick={() => {
                        setSelectedRecord(record);
                        setIsModalOpen(true);
                      }}
                      className="px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded-md hover:bg-purple-200"
                    >
                      Ver Detalles
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Modal de detalles */}
      {selectedRecord && <RecordDetailsModal />}
    </div>
  );
};

export default PetMedicalHistory;

Estructura: components
Archivo: Register.js
--------------------------------------------------
// src/components/Register.js
import React, { useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import toast from 'react-hot-toast';
import axios from 'axios';

const Register = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [isLoading, setIsLoading] = useState(false);

  const formik = useFormik({
    initialValues: {
      email: '',
      firstName: '',
      lastName: '',
      phoneNumber: '',
      password: '',
      confirmPassword: '',
    },
    validationSchema: Yup.object({
      email: Yup.string()
        .email('Por favor ingresa un email válido')
        .required('El email es requerido'),
      firstName: Yup.string()
        .required('El nombre es requerido')
        .min(2, 'El nombre debe tener al menos 2 caracteres')
        .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/, 'Solo se permiten letras'),
      lastName: Yup.string()
        .required('El apellido es requerido')
        .min(2, 'El apellido debe tener al menos 2 caracteres')
        .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/, 'Solo se permiten letras'),
      phoneNumber: Yup.string()
        .required('El teléfono es requerido')
        .matches(/^\d{8}$/, 'El teléfono debe tener exactamente 10 dígitos'),
      password: Yup.string()
        .required('La contraseña es requerida')
        .min(6, 'La contraseña debe tener al menos 6 caracteres'),
      confirmPassword: Yup.string()
        .required('Por favor confirma tu contraseña')
        .oneOf([Yup.ref('password'), null], 'Las contraseñas deben coincidir'),
    }),
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const userData = {
          email: values.email,
          nombre: values.firstName,
          apellido: values.lastName,
          telefono: values.phoneNumber,
          password: values.password,
          roles: ['CLIENTE'],
        };
        const response = await axios.post('http://localhost:8080/api/auth/register', userData);
        if (response.data.success) {
          // Extraer token y datos del usuario
          const { token, user } = response.data.data;
          
          // Actualizar contexto de autenticación
          login(user, token);
          
          toast.success('¡Registro exitoso!');
          navigate('/dashboard');
        }
      } catch (error) {
        const errorMessage = error.response?.data?.error?.message || 'Error al registrar usuario';
        toast.error(errorMessage);
      } finally {
        setIsLoading(false);
      }
    },
  });

  return (
    <div className="flex min-h-screen">
      {/* Imagen decorativa - lado izquierdo */}
      <div className="hidden lg:flex lg:w-1/2">
        <img 
          src="/register-pets.png" 
          alt="Pets illustration"
          className="w-full h-full object-cover"
        />
      </div>

      {/* Formulario - lado derecho */}
      <div className="w-full lg:w-1/2 flex flex-col justify-center px-8 lg:px-16">
        <div className="max-w-md w-full mx-auto">
          {/* Logo y título */}
          <div className="text-center mb-8">
            <h2 className="flex items-center justify-center text-3xl font-bold">
              <span className="text-4xl mr-2">🐾</span>
              PurplePaw
            </h2>
          </div>

          <form onSubmit={formik.handleSubmit} className="space-y-6">
            {/* Campo Email */}
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                type="email"
                name="email"
                {...formik.getFieldProps('email')}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                placeholder="Enter your email"
              />
              {formik.touched.email && formik.errors.email && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.email}</p>
              )}
            </div>

            {/* Campos Nombre y Apellido */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  First Name
                </label>
                <input
                  type="text"
                  name="firstName"
                  {...formik.getFieldProps('firstName')}
                  className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                  placeholder="Enter your first name"
                />
                {formik.touched.firstName && formik.errors.firstName && (
                  <p className="mt-1 text-sm text-red-600">{formik.errors.firstName}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Last Name
                </label>
                <input
                  type="text"
                  name="lastName"
                  {...formik.getFieldProps('lastName')}
                  className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                  placeholder="Enter your last name"
                />
                {formik.touched.lastName && formik.errors.lastName && (
                  <p className="mt-1 text-sm text-red-600">{formik.errors.lastName}</p>
                )}
              </div>
            </div>

            {/* Campo Teléfono */}
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Phone Number
              </label>
              <input
                type="tel"
                name="phoneNumber"
                {...formik.getFieldProps('phoneNumber')}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                placeholder="Enter your phone number"
              />
              {formik.touched.phoneNumber && formik.errors.phoneNumber && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.phoneNumber}</p>
              )}
            </div>

            {/* Campos Contraseña */}
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                type="password"
                name="password"
                {...formik.getFieldProps('password')}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                placeholder="Enter your password"
              />
              {formik.touched.password && formik.errors.password && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.password}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <input
                type="password"
                name="confirmPassword"
                {...formik.getFieldProps('confirmPassword')}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                placeholder="Confirm your password"
              />
              {formik.touched.confirmPassword && formik.errors.confirmPassword && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.confirmPassword}</p>
              )}
            </div>

            {/* Botón Submit */}
            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-colors duration-200"
            >
              {isLoading ? 'Registering...' : 'Register'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Register;


Estructura: components
Archivo: ScheduleAppointment.js
--------------------------------------------------
import React, { useState, useEffect } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';

import { useAuth } from '../context/AuthContext';
import axiosInstance from '../config/axios';
import { format } from 'date-fns';
import toast from 'react-hot-toast';

// Esquema de validación con Yup
const validationSchema = Yup.object().shape({
  appointmentDate: Yup.date()
    .required('La fecha es requerida')
    .min(new Date(), 'La fecha no puede ser en el pasado'),
  appointmentTime: Yup.string()
    .required('La hora es requerida'),
  reason: Yup.string()
    .required('El motivo es requerido')
    .min(5, 'El motivo debe tener al menos 5 caracteres'),
  notes: Yup.string()
    .min(5, 'Las notas deben tener al menos 5 caracteres'),
  veterinarianId: Yup.string()
    .required('El veterinario es requerido')
});

const ScheduleAppointment = ({ petId, clientId, onSuccess, onCancel }) => {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [veterinarians, setVeterinarians] = useState([]);
  const [error, setError] = useState(null);
  const [selectedVeterinarian, setSelectedVeterinarian] = useState(null);

  const isVeterinarian = user?.roles?.[0] === 'VETERINARIO';

  useEffect(() => {
    if (isVeterinarian) {
      setSelectedVeterinarian({
        uid: user.uid,
        nombre: user.nombre,
        apellido: user.apellido
      });
    } else {
      const loadVeterinarians = async () => {
        try {
          const response = await axiosInstance.get('/users/veterinarians', {
            params: {
              page: 0,
              size: 10,
              sortBy: 'nombre',
              sortDirection: 'ASC'
            }
          });

          if (response.data.success) {
            setVeterinarians(response.data.data.content);
          } else {
            toast.error('No se pudieron cargar los veterinarios');
          }
        } catch (error) {
          console.error('Error loading veterinarians:', error);
          toast.error(error.response?.data?.error?.message || 'Error al cargar la lista de veterinarios');
          setError('No se pudieron cargar los veterinarios disponibles');
        }
      };

      loadVeterinarians();
    }
  }, [user, isVeterinarian]);

  const formik = useFormik({
    initialValues: {
      appointmentDate: format(new Date(), 'yyyy-MM-dd'),
      appointmentTime: '09:00',
      reason: '',
      notes: '',
      veterinarianId: selectedVeterinarian?.uid || ''
    },
    validationSchema,
    enableReinitialize: true,
    onSubmit: async (values) => {
      setIsLoading(true);
      setError(null);
      
      try {
        const appointmentDateTime = new Date(`${values.appointmentDate}T${values.appointmentTime}`);

        const appointmentData = {
          petId,
          clientId,
          veterinarianId: isVeterinarian ? user.uid : values.veterinarianId,
          appointmentDate: appointmentDateTime.toISOString(),
          reason: values.reason,
          notes: values.notes || ''
        };

        const response = await axiosInstance.post('/appointments/schedule', appointmentData);

        if (response.data.success) {
          toast.success('Cita agendada exitosamente');
          onSuccess && onSuccess(response.data.data);
        }
      } catch (error) {
        console.error('Error scheduling appointment:', error);
        const errorMessage = error.response?.data?.error?.message || 
                           error.response?.data?.message ||
                           'Error al agendar la cita';
        setError(errorMessage);
        toast.error(errorMessage);
      } finally {
        setIsLoading(false);
      }
    },
  });

  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-md">
        <p className="text-red-600">{error}</p>
        <button
          onClick={onCancel}
          className="mt-4 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Volver
        </button>
      </div>
    );
  }

  return (
    <div className="w-full max-w-lg mx-auto p-6">
      {isVeterinarian || selectedVeterinarian ? (
        <form onSubmit={formik.handleSubmit} className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Fecha
              </label>
              <input
                type="date"
                {...formik.getFieldProps('appointmentDate')}
                min={format(new Date(), 'yyyy-MM-dd')}
                className="w-full px-3 py-2 border rounded-md"
                required
              />
              {formik.touched.appointmentDate && formik.errors.appointmentDate && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.appointmentDate}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Hora
              </label>
              <input
                type="time"
                {...formik.getFieldProps('appointmentTime')}
                min="09:00"
                max="18:00"
                step="1800"
                className="w-full px-3 py-2 border rounded-md"
                required
              />
              {formik.touched.appointmentTime && formik.errors.appointmentTime && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.appointmentTime}</p>
              )}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Motivo de la consulta
            </label>
            <textarea
              {...formik.getFieldProps('reason')}
              rows="3"
              className="w-full px-3 py-2 border rounded-md focus:ring-purple-500 focus:border-purple-500"
              placeholder="Describa el motivo de la consulta"
              required
            />
            {formik.touched.reason && formik.errors.reason && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.reason}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Notas adicionales (opcional)
            </label>
            <textarea
              {...formik.getFieldProps('notes')}
              rows="3"
              className="w-full px-3 py-2 border rounded-md focus:ring-purple-500 focus:border-purple-500"
              placeholder="Información adicional relevante"
            />
            {formik.touched.notes && formik.errors.notes && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.notes}</p>
            )}
          </div>

          <div className="flex justify-end space-x-4">
            {!isVeterinarian && (
              <button
                type="button"
                onClick={() => setSelectedVeterinarian(null)}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
              >
                Cambiar veterinario
              </button>
            )}
            <button
              type="submit"
              disabled={isLoading || !formik.isValid}
              className="px-4 py-2 text-sm font-medium text-white bg-purple-600 rounded-md hover:bg-purple-700 disabled:opacity-50"
            >
              {isLoading ? 'Agendando...' : 'Agendar Cita'}
            </button>
          </div>
        </form>
      ) : (
        <div className="mb-6">
          <h3 className="text-lg font-medium mb-4">Seleccione un veterinario</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Nombre
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Email
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Acción
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {veterinarians.map((vet) => (
                  <tr key={vet.uid}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {vet.nombre} {vet.apellido}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {vet.email}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => {
                          setSelectedVeterinarian(vet);
                          formik.setFieldValue('veterinarianId', vet.uid);
                        }}
                        className="px-4 py-2 bg-purple-100 text-purple-700 rounded-md"
                      >
                        Seleccionar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScheduleAppointment;

Estructura: components
Archivo: ServiceForm.js
--------------------------------------------------
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from '../config/axios';
import toast from 'react-hot-toast';

const ServiceForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    durationMinutes: '',
    category: '',
    requirements: [''],
    recommendations: [''],
    warnings: [''],
  });

  const [categories, setCategories] = useState([]);
  const { id } = useParams(); // Obtener el parámetro de la URL
  const navigate = useNavigate();

  useEffect(() => {
    const loadCategories = async () => {
      try {
        const response = await axios.get('/services/categories');
        if (response.data.success) {
          setCategories(response.data.data);
        } else {
          toast.error('Error al cargar las categorías');
        }
      } catch (error) {
        console.error('Error cargando categorías:', error);
        toast.error('Error al cargar las categorías');
      }
    };

    const loadServiceDetails = async () => {
      if (!id) return; // Si no hay ID, es una creación de servicio
      try {
        const response = await axios.get(`/services/${id}`);
        if (response.data.success) {
          const service = response.data.data;
          setFormData({
            name: service.name,
            description: service.description,
            price: service.price,
            durationMinutes: service.durationMinutes,
            category: service.category,
            requirements: service.requirements || [''],
            recommendations: service.recommendations || [''],
            warnings: service.warnings || [''],
          });
        } else {
          toast.error('Error al cargar los detalles del servicio');
        }
      } catch (error) {
        console.error('Error cargando servicio:', error);
        toast.error('Error al cargar los detalles del servicio');
      }
    };

    loadCategories();
    loadServiceDetails();
  }, [id]);

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleArrayChange = (field, index, value) => {
    const newArray = [...formData[field]];
    newArray[index] = value;
    setFormData((prev) => ({ ...prev, [field]: newArray }));
  };

  const handleArrayAdd = (field) => {
    setFormData((prev) => ({ ...prev, [field]: [...prev[field], ''] }));
  };

  const handleArrayRemove = (field, index) => {
    setFormData((prev) => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index),
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (id) {
        // Edición
        await axios.put(`/services/${id}`, formData);
        toast.success('Servicio actualizado exitosamente');
      } else {
        // Creación
        await axios.post('/services', formData);
        toast.success('Servicio creado exitosamente');
      }
      navigate('/admin/services');
    } catch (error) {
      console.error('Error al guardar el servicio:', error);
      toast.error('Error al guardar el servicio');
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">{id ? 'Editar Servicio' : 'Agregar Servicio'}</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Nombre"
          value={formData.name}
          onChange={(e) => handleInputChange('name', e.target.value)}
          className="w-full px-4 py-2 border rounded"
          required
        />
        <textarea
          placeholder="Descripción"
          value={formData.description}
          onChange={(e) => handleInputChange('description', e.target.value)}
          className="w-full px-4 py-2 border rounded"
          required
        />
        <input
          type="number"
          placeholder="Precio"
          value={formData.price}
          onChange={(e) => handleInputChange('price', e.target.value)}
          className="w-full px-4 py-2 border rounded"
          required
        />
        <input
          type="number"
          placeholder="Duración (min)"
          value={formData.durationMinutes}
          onChange={(e) => handleInputChange('durationMinutes', e.target.value)}
          className="w-full px-4 py-2 border rounded"
          required
        />
        <select
          value={formData.category}
          onChange={(e) => handleInputChange('category', e.target.value)}
          className="w-full px-4 py-2 border rounded"
          required
        >
          <option value="">Selecciona una categoría</option>
          {categories.map((cat) => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>

        {['requirements', 'recommendations', 'warnings'].map((field) => (
          <div key={field}>
            <label className="block text-sm font-medium capitalize">{field}</label>
            {formData[field].map((item, index) => (
              <div key={index} className="flex items-center space-x-2">
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleArrayChange(field, index, e.target.value)}
                  className="w-full px-4 py-2 border rounded"
                />
                <button
                  type="button"
                  onClick={() => handleArrayRemove(field, index)}
                  className="text-red-500"
                >
                  Eliminar
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={() => handleArrayAdd(field)}
              className="mt-2 px-4 py-2 bg-blue-500 text-white rounded"
            >
              Añadir {field.slice(0, -1)}
            </button>
          </div>
        ))}

        <div className="flex space-x-4">
          <button type="submit" className="px-6 py-2 bg-green-500 text-white rounded">
            Guardar
          </button>
          <button
            type="button"
            onClick={() => navigate('/admin/services')}
            className="px-6 py-2 bg-gray-300 text-black rounded"
          >
            Cancelar
          </button>
        </div>
      </form>
    </div>
  );
};

export default ServiceForm;


Estructura: components
Archivo: ServiceList.js
--------------------------------------------------
import React, { useState, useEffect, useCallback, useRef } from 'react';
import Table from './common/Table/Table';
import Modal from './common/Modal/Modal';
import axios from '../config/axios';
import toast from 'react-hot-toast';
import { useAuth } from '../context/AuthContext'; // Contexto de autenticación
import { Search, X, Heart } from 'lucide-react'; // Importar íconos para favoritos

const SearchBox = ({ searchTerm, onSearchChange, onClear }) => (
  <div className="relative w-full max-w-md">
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder="Buscar servicios..."
      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 
               bg-white placeholder-gray-500 focus:outline-none focus:ring-2 
               focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
    />
    {searchTerm && (
      <button
        onClick={onClear}
        className="absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <X className="h-4 w-4 text-gray-400 hover:text-gray-500" />
      </button>
    )}
  </div>
);

const ServiceList = () => {
  const [services, setServices] = useState([]);
  const [categories, setCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [category, setCategory] = useState('All');
  const [isLoading, setIsLoading] = useState(true);
  const [showFavorites, setShowFavorites] = useState(false);
  const { user } = useAuth(); 

  // Verificar si el usuario es veterinario
  const isVeterinario = user?.roles?.includes('VETERINARIO');

  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0,
    last: false,
  });
  const [selectedService, setSelectedService] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const searchTimeoutRef = useRef(null);

  const loadServices = useCallback(async () => {
    try {
      setIsLoading(true);
  
      if (showFavorites && isVeterinario) {
        const favoritesResponse = await axios.get('/favorites');
        const favoriteServices = favoritesResponse.data.data || [];
  
        // Filtrar solo servicios veterinarios y cargar detalles completos
        const veterinaryServices = favoriteServices.filter(
          (item) => item.itemType === 'VETERINARY_SERVICE'
        );
  
        const servicesWithDetails = await Promise.all(
          veterinaryServices.map(async (item) => {
            try {
              const serviceDetails = await axios.get(`/services/${item.itemId}/details`);
              return {
                id: item.itemId,
                name: serviceDetails.data.data.name,
                description: serviceDetails.data.data.description,
                category: serviceDetails.data.data.category,
                price: serviceDetails.data.data.price,
                favorito: true, // Este servicio está marcado como favorito
              };
            } catch (error) {
              console.error(`Error cargando detalles del servicio ${item.itemId}:`, error);
              return {
                id: item.itemId,
                name: item.itemName,
                price: item.price,
                favorito: true,
              };
            }
          })
        );
  
        setServices(servicesWithDetails);
        setPagination((prev) => ({
          ...prev,
          totalElements: servicesWithDetails.length,
          totalPages: 1, // Solo una página para favoritos
        }));
      } else {
        // Lógica existente para cargar todos los servicios
        let url = `/services?page=${pagination.pageNumber}&size=${pagination.pageSize}&sortBy=name&sortDirection=ASC`;
  
        if (searchTerm && category !== 'All') {
          url += `&filterBy=name&filterValue=${searchTerm}&category=${category}`;
        } else if (searchTerm) {
          url += `&filterBy=name&filterValue=${searchTerm}`;
        } else if (category !== 'All') {
          url += `&category=${category}`;
        }
  
        const response = await axios.get(url);
        const servicesData = response?.data?.data?.content || [];
  
        let favoriteServiceIds = [];
        if (isVeterinario) {
          const favoritesResponse = await axios.get('/favorites');
          const favoriteServices = favoritesResponse.data.data || [];
          favoriteServiceIds = favoriteServices.map((item) => item.itemId);
        }
  
        const servicesWithFavorites = servicesData.map((service) => ({
          ...service,
          favorito: favoriteServiceIds.includes(service.id),
        }));
  
        setServices(servicesWithFavorites);
        setPagination((prev) => ({
          ...prev,
          totalElements: response.data.data.totalElements || 0,
          totalPages: response.data.data.totalPages || 0,
          last: response.data.data.last || false,
        }));
      }
    } catch (error) {
      console.error('Error cargando servicios:', error);
      toast.error('Error al cargar la lista de servicios');
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, searchTerm, category, showFavorites, isVeterinario]);
  
  const toggleFavorite = async (serviceId) => {
    if (!isVeterinario) return; // Solo los veterinarios pueden agregar o quitar favoritos

    try {
      const response = await axios.post('/favorites/toggle', {
        itemId: serviceId,
        itemType: 'VETERINARY_SERVICE',
      });
      const isFavorite = response.data.data !== null;
  
      setServices((prev) =>
        prev.map((service) =>
          service.id === serviceId ? { ...service, favorito: isFavorite } : service
        )
      );
  
      toast.success(isFavorite ? 'Marcado como favorito' : 'Removido de favoritos');
    } catch (error) {
      console.error('Error al alternar favorito:', error);
      toast.error('Error al actualizar favorito');
    }
  };
  
  

  
  

  const handleSearchChange = (value) => {
    setSearchTerm(value);
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);
    searchTimeoutRef.current = setTimeout(() => loadServices(), 500);
  };

  const handleSearchClear = () => {
    setSearchTerm('');
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    loadServices();
  };

  const handlePageChange = (newPage) => {
    setPagination((prev) => ({ ...prev, pageNumber: newPage }));
    loadServices();
  };

  const handleCategoryChange = (e) => {
    setCategory(e.target.value);
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    loadServices();
  };

  const handleViewDetails = async (service) => {
    try {
      const response = await axios.get(`/services/${service.id}/details`);
      if (response.data.success) {
        const details = response.data.data;
        setSelectedService(details);
        setIsModalOpen(true);
      } else {
        toast.error('No se pudieron cargar los detalles del servicio');
      }
    } catch (error) {
      console.error('Error al obtener detalles del servicio:', error);
      toast.error('Error al cargar los detalles del servicio');
    }
  };

  const closeModal = () => {
    setSelectedService(null);
    setIsModalOpen(false);
  };

  useEffect(() => {
    
    const loadCategories = async () => {
      try {
        const response = await axios.get('/services/categories');
        if (response.data.success) {
          setCategories(response.data.data);
        } else {
          toast.error('Error al cargar las categorías de servicios');
        }
      } catch (error) {
        console.error('Error cargando categorías:', error);
        toast.error('Error al cargar las categorías');
      }
    };

    
    loadCategories();
    loadServices();
  }, [loadServices]);
  

  return (
    <div className="p-6">
      <div className="mb-6 space-y-4">
        <h2 className="text-2xl font-bold text-gray-900">Servicios para Mascotas</h2>
        <div className="flex space-x-4 items-center">
          <SearchBox
            searchTerm={searchTerm}
            onSearchChange={handleSearchChange}
            onClear={handleSearchClear}
          />
          <select
            value={category}
            onChange={handleCategoryChange}
            className="border px-4 py-2 rounded"
          >
            <option value="All">Todas las categorías</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>
          {isVeterinario && (
            <button
              onClick={() => setShowFavorites((prev) => !prev)}
              className={`px-4 py-2 rounded ${showFavorites ? 'bg-purple-500 text-white' : 'bg-gray-300 text-black'}`}
            >
              {showFavorites ? 'Ver Todos' : 'Ver Favoritos'}
            </button>
          )}
        </div>
      </div>

      <Table
        columns={[
          { key: 'name', label: 'Nombre' },
          { key: 'category', label: 'Categoría' },
          { key: 'price', label: 'Precio', render: (row) => `$${row.price}` },
          { key: 'description', label: 'Descripción' },
          ...(isVeterinario
            ? [
                {
                  key: 'favorite',
                  label: 'Favorito',
                  render: (row) => (
                    <button onClick={() => toggleFavorite(row.id)}>
                      <Heart className={row.favorito ? 'text-red-500 fill-current' : ''} />
                    </button>
                  ),
                },
              ]
            : []),    
          {
            key: 'actions',
            label: 'Acciones',
            render: (row) => (
              <button
                onClick={() => handleViewDetails(row)}
                className="px-3 py-1 bg-blue-500 text-white rounded"
              >
                Ver Detalles
              </button>
            ),
          },
        ]}
        data={services}
        pagination={pagination}
        onPageChange={(newPage) => handlePageChange(newPage)}
        isLoading={isLoading}
      />

{isModalOpen && selectedService && (
  <Modal isOpen={isModalOpen} onClose={closeModal} title="Detalles del Servicio">
    <div className="space-y-4">
      {/* Nombre del servicio */}
      <div>
        <h3 className="text-xl font-bold">{selectedService.name}</h3>
      </div>

      {/* Descripción */}
      {selectedService.description && (
        <div>
          <p>
            <strong>Descripción:</strong> {selectedService.description}
          </p>
        </div>
      )}

      {/* Precio */}
      <div>
        <p>
          <strong>Precio:</strong> ${selectedService.price}
        </p>
      </div>

      {/* Categoría */}
      {selectedService.category && (
        <div>
          <p>
            <strong>Categoría:</strong> {selectedService.category}
          </p>
        </div>
      )}

      {/* Duración */}
      {selectedService.durationMinutes && (
        <div>
          <p>
            <strong>Duración:</strong> {selectedService.durationMinutes} minutos
          </p>
        </div>
      )}

      {/* Requisitos */}
      {selectedService.requirements?.length > 0 && (
        <div>
          <p>
            <strong>Requisitos:</strong>
          </p>
          <ul className="list-disc ml-6">
            {selectedService.requirements.map((req, index) => (
              <li key={index}>{req}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Recomendaciones */}
      {selectedService.recommendations?.length > 0 && (
        <div>
          <p>
            <strong>Recomendaciones:</strong>
          </p>
          <ul className="list-disc ml-6">
            {selectedService.recommendations.map((rec, index) => (
              <li key={index}>{rec}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Advertencias */}
      {selectedService.warnings?.length > 0 && (
        <div>
          <p>
            <strong>Advertencias:</strong>
          </p>
          <ul className="list-disc ml-6">
            {selectedService.warnings.map((warning, index) => (
              <li key={index}>{warning}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Botón para cerrar */}
      <div>
        <button
          onClick={closeModal}
          className="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
        >
          Cerrar
        </button>
      </div>
    </div>
  </Modal>
)}

    </div>
  );
};

export default ServiceList;


Estructura: components
Archivo: ServiceManagement.js
--------------------------------------------------
import React, { useState, useEffect, useCallback, useRef } from 'react';
import Table from './common/Table/Table';
import axios from '../config/axios';
import toast from 'react-hot-toast';
import { Search, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

// Componente SearchBox
const SearchBox = ({ searchTerm, onSearchChange, onClear }) => (
  <div className="relative w-full max-w-md">
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder="Buscar servicios..."
      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 
               bg-white placeholder-gray-500 focus:outline-none focus:ring-2 
               focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
    />
    {searchTerm && (
      <button
        onClick={onClear}
        className="absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <X className="h-4 w-4 text-gray-400 hover:text-gray-500" />
      </button>
    )}
  </div>
);

const ServiceManagement = () => {
  const [services, setServices] = useState([]);
  const [categories, setCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [category, setCategory] = useState('All');
  const [isLoading, setIsLoading] = useState(true);
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0,
    last: false,
  });
  const searchTimeoutRef = useRef(null);
  const navigate = useNavigate();

  const loadServices = useCallback(async () => {
    try {
      setIsLoading(true);
      let url = `/services?page=${pagination.pageNumber}&size=${pagination.pageSize}&sortBy=name&sortDirection=ASC`;

      if (searchTerm && category !== 'All') {
        url += `&filterBy=name&filterValue=${searchTerm}&category=${category}`;
      } else if (searchTerm) {
        url += `&filterBy=name&filterValue=${searchTerm}`;
      } else if (category !== 'All') {
        url += `&category=${category}`;
      }

      const response = await axios.get(url);
      if (response?.data?.data?.content) {
        const mappedServices = response.data.data.content.map((service) => ({
          ...service,
          durationMinutes: service.durationMinutes || 'No especificado',
        }));

        setServices(mappedServices);
        setPagination((prev) => ({
          ...prev,
          totalElements: response.data.data.totalElements || 0,
          totalPages: response.data.data.totalPages || 0,
          last: response.data.data.last || false,
        }));
      } else {
        setServices([]);
        setPagination((prev) => ({
          ...prev,
          totalElements: 0,
          totalPages: 0,
          last: true,
        }));
      }
    } catch (error) {
      console.error('Error cargando servicios:', error);
      toast.error('Error al cargar la lista de servicios');
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, searchTerm, category]);

  useEffect(() => {
    const loadCategories = async () => {
      try {
        const response = await axios.get('/services/categories');
        if (response.data.success) {
          setCategories(response.data.data);
        } else {
          toast.error('Error al cargar las categorías de servicios');
        }
      } catch (error) {
        console.error('Error cargando categorías:', error);
        toast.error('Error al cargar las categorías');
      }
    };
    loadCategories();
    loadServices();
  }, [loadServices]);

  const handleDeleteService = async (id) => {
    try {
      await axios.delete(`/services/${id}`);
      toast.success('Servicio eliminado exitosamente');
      loadServices();
    } catch (error) {
      toast.error('Error al eliminar el servicio');
    }
  };

  const handleSearchChange = (value) => {
    setSearchTerm(value);
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    if (searchTimeoutRef.current) clearTimeout(searchTimeoutRef.current);
    searchTimeoutRef.current = setTimeout(() => loadServices(), 500);
  };

  const handleSearchClear = () => {
    setSearchTerm('');
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    loadServices();
  };

  const handlePageChange = (newPage) => {
    setPagination((prev) => ({ ...prev, pageNumber: newPage }));
    loadServices();
  };

  const handleCategoryChange = (e) => {
    setCategory(e.target.value);
    setPagination((prev) => ({ ...prev, pageNumber: 0 }));
    loadServices();
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">Gestión de Servicios Veterinarios</h2>
      <div className="mb-6 space-y-4">
        <SearchBox
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          onClear={handleSearchClear}
        />
        <select
          value={category}
          onChange={handleCategoryChange}
          className="border px-4 py-2 rounded"
        >
          <option value="All">Todas las categorías</option>
          {categories.map((cat) => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>
        <button
          onClick={() => navigate('/admin/services/new')}
          className="px-4 py-2 bg-green-500 text-white rounded"
        >
          Agregar Servicio
        </button>
      </div>

      <Table
        columns={[
          { key: 'name', label: 'Nombre' },
          { key: 'category', label: 'Categoría' },
          { key: 'price', label: 'Precio', render: (row) => `$${row.price}` },
          {
            key: 'durationMinutes',
            label: 'Duración (min)',
            render: (row) => row.durationMinutes || 'No especificado',
          },
          {
            key: 'actions',
            label: 'Acciones',
            render: (row) => (
              <div className="space-x-2">
                <button
                  onClick={() => navigate(`/admin/services/edit/${row.id}`)}
                  className="px-3 py-1 bg-yellow-500 text-white rounded"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDeleteService(row.id)}
                  className="px-3 py-1 bg-red-500 text-white rounded"
                >
                  Eliminar
                </button>
              </div>
            ),
          },
        ]}
        data={services}
        pagination={pagination}
        onPageChange={handlePageChange}
        isLoading={isLoading}
      />
    </div>
  );
};

export default ServiceManagement;


Estructura: components
Archivo: ServiceReports.js
--------------------------------------------------
import React, { useState } from 'react';
import axiosInstance from '../config/axios';
import DatePicker from 'react-datepicker'; // Biblioteca para selección de fechas
import 'react-datepicker/dist/react-datepicker.css';
import { Bar, Pie } from 'react-chartjs-2';
import toast from 'react-hot-toast';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Tooltip,
  Legend,
} from 'chart.js';

// Registrar componentes de Chart.js
ChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, Tooltip, Legend);


const ServiceReports = () => {
  const [startDate, setStartDate] = useState(new Date()); // Fecha inicial
  const [endDate, setEndDate] = useState(new Date()); // Fecha final
  const [period, setPeriod] = useState('MONTHLY'); // Período por defecto
  const [reportData, setReportData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const fetchReport = async () => {
    try {
      setIsLoading(true);
      const response = await axiosInstance.get('/reports/services', {
        params: {
          startDate: startDate.toISOString().split('T')[0],
          endDate: endDate.toISOString().split('T')[0],
          period,
        },
      });

      if (response.data.success) {
        setReportData(response.data.data);
        toast.success('Reporte generado con éxito');
      } else {
        toast.error('Error al generar el reporte');
      }
    } catch (error) {
      console.error('Error al obtener el reporte:', error);
      toast.error('Error al obtener el reporte');
    } finally {
      setIsLoading(false);
    }
  };

  const generateChartData = (data) => {
    return {
      labels: data.servicesMetrics.map((service) => service.serviceName),
      datasets: [
        {
          label: 'Veces Usado',
          data: data.servicesMetrics.map((service) => service.totalUsage),
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
        {
          label: 'Ingresos Generados',
          data: data.servicesMetrics.map((service) => service.totalRevenue),
          backgroundColor: 'rgba(153, 102, 255, 0.6)',
        },
      ],
    };
  };

  const generatePieData = (data, type) => {
    const labels = Object.keys(data[type]);
    const values = Object.values(data[type]);
    return {
      labels,
      datasets: [
        {
          data: values,
          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
        },
      ],
    };
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Reporte de Servicios</h1>

      {/* Filtros */}
      <div className="flex space-x-4 mb-6">
        <div>
          <label className="block text-sm font-medium">Inicio</label>
          <DatePicker
            selected={startDate}
            onChange={(date) => setStartDate(date)}
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Fin</label>
          <DatePicker
            selected={endDate}
            onChange={(date) => setEndDate(date)}
            className="border rounded px-3 py-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium">Período</label>
          <select
            value={period}
            onChange={(e) => setPeriod(e.target.value)}
            className="border rounded px-3 py-2"
          >
            <option value="WEEKLY">Semanal</option>
            <option value="MONTHLY">Mensual</option>
            <option value="YEARLY">Anual</option>
          </select>
        </div>
        <button
          onClick={fetchReport}
          className="bg-purple-600 text-white px-4 py-2 rounded"
        >
          Generar Reporte
        </button>
      </div>

      {/* Loading */}
      {isLoading ? (
        <div className="text-center">Cargando...</div>
      ) : reportData ? (
        <>
          {/* Resumen */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Resumen General</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="p-4 bg-gray-50 rounded shadow">
                <h3 className="text-lg font-medium">Ingresos Totales</h3>
                <p className="text-2xl font-bold">${reportData.totalRevenue}</p>
              </div>
              <div className="p-4 bg-gray-50 rounded shadow">
                <h3 className="text-lg font-medium">Servicios Solicitados</h3>
                <p className="text-2xl font-bold">{reportData.totalServicesUsed}</p>
              </div>
            </div>
          </div>

          {/* Gráfico de barras */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Gráfico de Uso por Servicio</h2>
            <Bar data={generateChartData(reportData)} />
          </div>

          {/* Gráficos de pastel */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <h2 className="text-xl font-semibold mb-2">Ingresos por Categoría</h2>
              <Pie data={generatePieData(reportData, 'revenueByCategory')} />
            </div>
            <div>
              <h2 className="text-xl font-semibold mb-2">Uso por Categoría</h2>
              <Pie data={generatePieData(reportData, 'usageByCategory')} />
            </div>
          </div>

          {/* Tabla */}
          <div className="mt-6">
            <h2 className="text-xl font-semibold mb-2">Detalle por Servicio</h2>
            <table className="min-w-full border border-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-2">Servicio</th>
                  <th className="px-4 py-2">Veces Usado</th>
                  <th className="px-4 py-2">Ingresos Totales</th>
                  <th className="px-4 py-2">Ingresos Promedio</th>
                </tr>
              </thead>
              <tbody>
                {reportData.servicesMetrics.map((service, index) => (
                  <tr key={index} className="border-t">
                    <td className="px-4 py-2">{service.serviceName}</td>
                    <td className="px-4 py-2">{service.totalUsage}</td>
                    <td className="px-4 py-2">${service.totalRevenue}</td>
                    <td className="px-4 py-2">${service.averageRevenue}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      ) : (
        <div className="text-center">No hay datos disponibles</div>
      )}
    </div>
  );
};

export default ServiceReports;


Estructura: components
Archivo: UserManagement.js
--------------------------------------------------
import React, { useState, useEffect, useCallback } from 'react';
import { UserCog, Plus, Search } from 'lucide-react';
import toast from 'react-hot-toast';
import userService from '../services/userService';
import Modal from './common/Modal/Modal';
import UserForm from '../components/users/UserForm';

const UserManagement = () => {
  // Estados para datos y UI
  const [users, setUsers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRole, setSelectedRole] = useState('ALL');
  const [selectedStatus, setSelectedStatus] = useState('ALL');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  
  // Estados para paginación
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0
  });

  // Estados para ordenamiento
  const [sortConfig] = useState({
    sortBy: 'nombre',
    sortDirection: 'ASC'
  });

  // Función para cargar usuarios
  const loadUsers = useCallback(async () => {
    try {
      setIsLoading(true);
      
      const paginationRequest = {
        page: pagination.pageNumber,
        size: pagination.pageSize,
        sortBy: sortConfig.sortBy,
        sortDirection: sortConfig.sortDirection,
        role: selectedRole,
        isActive: selectedStatus === 'ACTIVE' ? true : 
                 selectedStatus === 'INACTIVE' ? false : undefined,
        search: searchTerm
      };

      const data = await userService.getUsers(paginationRequest);
      
      setUsers(data.content);
      setPagination(prev => ({
        ...prev,
        totalElements: data.totalElements,
        totalPages: data.totalPages
      }));
    } catch (error) {
      toast.error('Error loading users: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, sortConfig, selectedRole, selectedStatus, searchTerm]);

  useEffect(() => {
    loadUsers();
  }, [loadUsers]);

  // Manejadores de eventos para CRUD
  const handleCreateUser = async (userData) => {
    try {
      await userService.createUser(userData);
      toast.success('User created successfully');
      setIsCreateModalOpen(false);
      loadUsers();
    } catch (error) {
      toast.error('Error creating user: ' + error.message);
    }
  };

  const handleUpdateUser = async (userData) => {
    try {
      await userService.updateUser(selectedUser.uid, userData);
      toast.success('User updated successfully');
      setIsEditModalOpen(false);
      loadUsers();
    } catch (error) {
      toast.error('Error updating user: ' + error.message);
    }
  };

  const handleDeleteUser = async (userId) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        await userService.deleteUser(userId);
        toast.success('User deleted successfully');
        loadUsers();
      } catch (error) {
        toast.error('Error deleting user: ' + error.message);
      }
    }
  };

  const handleToggleStatus = async (userId, currentStatus) => {
    try {
      await userService.toggleUserStatus(userId, !currentStatus);
      toast.success('User status updated successfully');
      loadUsers();
    } catch (error) {
      toast.error('Error updating user status: ' + error.message);
    }
  };

  // Manejadores para paginación y ordenamiento
  const handlePageChange = (newPage) => {
    setPagination(prev => ({ ...prev, pageNumber: newPage }));
  };

  // const handleSort = (key) => {
  //   setSortConfig(prev => ({
  //     sortBy: key,
  //     sortDirection: prev.sortBy === key && prev.sortDirection === 'ASC' ? 'DESC' : 'ASC'
  //   }));
  // };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center space-x-2">
          <UserCog className="h-6 w-6 text-purple-600" />
          <h1 className="text-2xl font-bold text-gray-900">User Management</h1>
        </div>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
        >
          <Plus className="h-5 w-5 mr-2" />
          Create New User
        </button>
      </div>

      {/* Filters */}
      <div className="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search users..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 pr-4 py-2 w-full border rounded-md"
          />
        </div>

        <select
          value={selectedRole}
          onChange={(e) => setSelectedRole(e.target.value)}
          className="px-4 py-2 border rounded-md"
        >
          <option value="ALL">All Roles</option>
          <option value="VETERINARIO">Veterinarian</option>
          <option value="RECEPCIONISTA">Receptionist</option>
          <option value="CLIENTE">Client</option>
        </select>

        <select
          value={selectedStatus}
          onChange={(e) => setSelectedStatus(e.target.value)}
          className="px-4 py-2 border rounded-md"
        >
          <option value="ALL">All Status</option>
          <option value="ACTIVE">Active</option>
          <option value="INACTIVE">Inactive</option>
        </select>
      </div>

      {/* Users Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Phone
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Role
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {isLoading ? (
              <tr>
                <td colSpan="6" className="px-6 py-4 text-center">
                  <div className="flex justify-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                  </div>
                </td>
              </tr>
            ) : users.length === 0 ? (
              <tr>
                <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                  No users found
                </td>
              </tr>
            ) : (
              users.map((user) => (
                <tr key={user.uid}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {user.nombre} {user.apellido}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">{user.email}</td>
                      <td className="px-6 py-4 whitespace-nowrap">{user.telefono}</td>
                      <td className="px-6 py-4 whitespace-nowrap">{user.roles[0]}</td>
                      <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 rounded-full ${user.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                              }`}>
                              {user.active ? 'Active' : 'Inactive'}
                          </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex space-x-2">
                              <button
                                  onClick={() => {
                                      setSelectedUser(user);
                                      setIsEditModalOpen(true);
                                  }}
                                  className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200"
                              >
                                  Edit
                              </button>
                              <button
                                  onClick={() => handleToggleStatus(user.uid, user.active)}
                                  className="px-3 py-1 text-sm bg-yellow-100 text-yellow-700 rounded-md hover:bg-yellow-200"
                              >
                                  {user.active ? 'Deactivate' : 'Activate'}
                              </button>
                              <button
                                  onClick={() => handleDeleteUser(user.uid)}
                                  className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded-md hover:bg-red-200"
                              >
                                  Delete
                              </button>
                          </div>
                      </td>
                  </tr>
              ))
                      )}
                  </tbody>
              </table>

              {/* Pagination */}
              {/* Paginación */}
              <div className="mt-4 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
                  <div className="flex flex-1 justify-between sm:hidden">
                      {/* Versión móvil */}
                      <button
                          onClick={() => handlePageChange(pagination.pageNumber - 1)}
                          disabled={pagination.pageNumber === 0}
                          className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50"
                      >
                          Previous
                      </button>
                      <button
                          onClick={() => handlePageChange(pagination.pageNumber + 1)}
                          disabled={pagination.pageNumber === pagination.totalPages - 1}
                          className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50"
                      >
                          Next
                      </button>
                  </div>

                  <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
                      {/* Información de resultados */}
                      <div>
                          <p className="text-sm text-gray-700">
                              Showing{' '}
                              <span className="font-medium">
                                  {pagination.pageNumber * pagination.pageSize + 1}
                              </span>
                              {' '}-{' '}
                              <span className="font-medium">
                                  {Math.min(
                                      (pagination.pageNumber + 1) * pagination.pageSize,
                                      pagination.totalElements
                                  )}
                              </span>
                              {' '}of{' '}
                              <span className="font-medium">{pagination.totalElements}</span>
                              {' '}results
                          </p>
                      </div>

                      {/* Números de página */}
                      <div>
                          <nav className="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                              {/* Botón Previous */}
                              <button
                                  onClick={() => handlePageChange(pagination.pageNumber - 1)}
                                  disabled={pagination.pageNumber === 0}
                                  className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50"
                              >
                                  <span className="sr-only">Previous</span>
                                  <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                      <path fillRule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clipRule="evenodd" />
                                  </svg>
                              </button>

                              {/* Números de página */}
                              {Array.from({ length: Math.min(5, pagination.totalPages) }).map((_, index) => {
                                  let pageNumber;

                                  // Lógica para mostrar las páginas más relevantes
                                  if (pagination.totalPages <= 5) {
                                      pageNumber = index;
                                  } else if (pagination.pageNumber < 3) {
                                      pageNumber = index;
                                  } else if (pagination.pageNumber > pagination.totalPages - 4) {
                                      pageNumber = pagination.totalPages - 5 + index;
                                  } else {
                                      pageNumber = pagination.pageNumber - 2 + index;
                                  }

                                  return (
                                      <button
                                          key={pageNumber}
                                          onClick={() => handlePageChange(pageNumber)}
                                          className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold
                ${pagination.pageNumber === pageNumber
                                                  ? 'z-10 bg-purple-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600'
                                                  : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                                              }`}
                                      >
                                          {pageNumber + 1}
                                      </button>
                                  );
                              })}

                              {/* Botón Next */}
                              <button
                                  onClick={() => handlePageChange(pagination.pageNumber + 1)}
                                  disabled={pagination.pageNumber === pagination.totalPages - 1}
                                  className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50"
                              >
                                  <span className="sr-only">Next</span>
                                  <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                      <path fillRule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clipRule="evenodd" />
                                  </svg>
                              </button>
                          </nav>
                      </div>
                  </div>
              </div>
          </div>

          {/* Modales */}
          <Modal
              isOpen={isCreateModalOpen}
              onClose={() => setIsCreateModalOpen(false)}
              title="Create New User"
          >
        <UserForm
          onSubmit={handleCreateUser}
          onCancel={() => setIsCreateModalOpen(false)}
        />
      </Modal>

      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="Edit User"
      >
        <UserForm
          user={selectedUser}
          onSubmit={handleUpdateUser}
          onCancel={() => setIsEditModalOpen(false)}
        />
      </Modal>
    </div>
  );
};

export default UserManagement;

Estructura: components > appointments
Archivo: AppointmentForm.js
--------------------------------------------------
import React, { useState } from 'react';
import { format } from 'date-fns';

const AppointmentForm = ({ selectedVeterinarian, onSubmit, onBack }) => {
  const [appointmentDate, setAppointmentDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [appointmentTime, setAppointmentTime] = useState('09:00');
  const [reason, setReason] = useState('');
  const [notes, setNotes] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const formData = {
      appointmentDate,
      appointmentTime,
      reason,
      notes
    };
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <p className="text-sm font-medium text-gray-700 mb-2">
          Veterinario seleccionado: {selectedVeterinarian.nombre} {selectedVeterinarian.apellido}
        </p>
        <button
          type="button"
          onClick={onBack}
          className="text-sm text-purple-600 hover:text-purple-700"
        >
          Cambiar veterinario
        </button>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Fecha
          </label>
          <input
            type="date"
            value={appointmentDate}
            onChange={(e) => setAppointmentDate(e.target.value)}
            min={format(new Date(), 'yyyy-MM-dd')}
            className="w-full px-3 py-2 border rounded-md"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Hora
          </label>
          <input
            type="time"
            value={appointmentTime}
            onChange={(e) => setAppointmentTime(e.target.value)}
            min="09:00"
            max="18:00"
            step="1800"
            className="w-full px-3 py-2 border rounded-md"
            required
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Motivo de la consulta
        </label>
        <textarea
          value={reason}
          onChange={(e) => setReason(e.target.value)}
          rows="3"
          className="w-full px-3 py-2 border rounded-md"
          required
          placeholder="Describa el motivo de la consulta"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Notas adicionales (opcional)
        </label>
        <textarea
          value={notes}
          onChange={(e) => setNotes(e.target.value)}
          rows="3"
          className="w-full px-3 py-2 border rounded-md"
          placeholder="Información adicional relevante"
        />
      </div>

      <div className="flex justify-end space-x-4">
        <button
          type="button"
          onClick={onBack}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
        >
          Cancelar
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-purple-600 rounded-md hover:bg-purple-700"
        >
          Agendar Cita
        </button>
      </div>
    </form>
  );
};
export default AppointmentForm;

Estructura: components > appointments
Archivo: DailyAppointmentsTable.js
--------------------------------------------------
// components/appointments/DailyAppointmentsTable.js
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../context/AuthContext';
import Table from '../common/Table/Table';
import axiosInstance from '../../config/axios';
import { format } from 'date-fns';
import toast from 'react-hot-toast';

const DailyAppointmentsTable = ({ selectedDate }) => {
  // Contexto de autenticación
  const { user } = useAuth();

  // Estados
  const [appointments, setAppointments] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0
  });
  const [sortConfig, setSortConfig] = useState({
    sortBy: 'appointmentDate',
    sortDirection: 'ASC'
  });
  const [filters, setFilters] = useState({});

  // Función memorizada para obtener las citas
  const fetchAppointments = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Formateamos la fecha como objeto Date si es string
      let dateToUse = typeof selectedDate === 'string' 
        ? new Date(selectedDate) 
        : selectedDate;
        
        dateToUse = new Date(dateToUse.getTime() + Math.abs(dateToUse.getTimezoneOffset() * 60000));

      // Construimos los parámetros
      const params = {
        date: dateToUse.toISOString(),
        veterinarianId: user.uid,
        page: pagination.pageNumber,
        size: pagination.pageSize,
        sortBy: sortConfig.sortBy,
        sortDirection: sortConfig.sortDirection,
        ...filters
      };

      // Log para debugear
      console.log('Sending request with params:', params);

      const response = await axiosInstance.get('/appointments/daily', { params });

      // Log para debugear
      console.log('Response received:', response.data);

      if (response.data.data) {
        setAppointments(response.data.data.content || []);
        setPagination(prev => ({
          ...prev,
          totalElements: response.data.data.totalElements || 0,
          totalPages: response.data.data.totalPages || 0
        }));
      } else {
        setAppointments([]);
        setPagination(prev => ({
          ...prev,
          totalElements: 0,
          totalPages: 0
        }));
      }
    } catch (error) {
      console.error('Error fetching appointments:', error);
      console.error('Error details:', {
        response: error.response?.data,
        status: error.response?.status,
        message: error.message
      });

      if (error.response?.status === 500) {
        toast.error('Server error. Please try again later.');
      } else {
        toast.error('Error loading appointments: ' + (error.response?.data?.error?.message || error.message));
      }
    } finally {
      setIsLoading(false);
    }
  }, [selectedDate, user.uid, pagination.pageNumber, pagination.pageSize, sortConfig.sortBy, sortConfig.sortDirection, filters]);
  useEffect(() => {
    console.log('Selected date changed:', selectedDate);
  }, [selectedDate]);

  

  // Efecto para cargar las citas cuando cambien las dependencias
  useEffect(() => {
    fetchAppointments();
  }, [fetchAppointments]);

  // Manejadores de eventos memorizados
  const handleDetails = useCallback(async (appointmentId) => {
    try {
      // Aquí iría la lógica para mostrar los detalles (por ejemplo, abrir un modal)
      toast.success('Opening appointment details');
    } catch (error) {
      toast.error('Error showing appointment details');
      console.error('Error showing details:', error);
    }
  }, []);

  const handleReschedule = useCallback(async (appointmentId) => {
    try {
      // Aquí iría la lógica para reprogramar (por ejemplo, abrir un modal de reprogramación)
      toast.success('Opening reschedule form');
    } catch (error) {
      toast.error('Error opening reschedule form');
      console.error('Error rescheduling:', error);
    }
  }, []);

  const handleCancel = useCallback(async (appointmentId) => {
    try {
      if (window.confirm('Are you sure you want to cancel this appointment?')) {
        await axiosInstance.post(`/appointments/${appointmentId}/cancel`);
        toast.success('Appointment cancelled successfully');
        await fetchAppointments();
      }
    } catch (error) {
      toast.error('Error cancelling appointment');
      console.error('Error cancelling:', error);
    }
  }, [fetchAppointments]);

  const handlePageChange = useCallback((newPage) => {
    setPagination(prev => ({ ...prev, pageNumber: newPage }));
  }, []);

  const handleSort = useCallback((key) => {
    setSortConfig(prev => ({
      sortBy: key,
      sortDirection: prev.sortBy === key && prev.sortDirection === 'ASC' ? 'DESC' : 'ASC'
    }));
  }, []);

  const handleFilter = useCallback((key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setPagination(prev => ({ ...prev, pageNumber: 0 }));
  }, []);

  // Función auxiliar para obtener las clases CSS del estado
  const getStatusColor = useCallback((status) => {
    const colors = {
      SCHEDULED: 'text-yellow-600 bg-yellow-100 px-2 py-1 rounded-full',
      CONFIRMED: 'text-green-600 bg-green-100 px-2 py-1 rounded-full',
      CANCELLED: 'text-red-600 bg-red-100 px-2 py-1 rounded-full',
      COMPLETED: 'text-blue-600 bg-blue-100 px-2 py-1 rounded-full',
      IN_PROGRESS: 'text-purple-600 bg-purple-100 px-2 py-1 rounded-full'
    };
    return colors[status] || '';
  }, []);

  // Definición de columnas
  const columns = [
    {
        key: 'appointmentDate',
        label: 'Time',
        sortable: true,
        render: (row) => {
          try {
            return format(new Date(row.appointmentDate), 'HH:mm');
          } catch (error) {
            console.error('Error formatting date:', error);
            return 'Invalid date';
          }
        }
    },
    {
      key: 'client',
      label: 'Client',
      filterable: true,
      render: (row) => `${row.client.nombre} ${row.client.apellido}`
    },
    {
      key: 'pet',
      label: 'Pet',
      filterable: true,
      render: (row) => row.pet.name
    },
    {
      key: 'reason',
      label: 'Reason',
      filterable: true
    },
    {
      key: 'status',
      label: 'Status',
      filterable: true,
      render: (row) => (
        <span className={getStatusColor(row.status)}>
          {row.status}
        </span>
      )
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (row) => (
        <div className="flex space-x-2">
          <button 
            onClick={() => handleDetails(row.id)}
            className="px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded-md hover:bg-purple-200 transition-colors"
          >
            Details
          </button>
          <button
            onClick={() => handleReschedule(row.id)}
            className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors"
          >
            Reschedule
          </button>
          <button
            onClick={() => handleCancel(row.id)}
            className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors"
          >
            Cancel
          </button>
        </div>
      )
    }
  ];
  

  return (
    <>
    {isLoading && (
        <div className="flex justify-center items-center py-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700"></div>
        </div>
      )}
    <Table
      columns={columns}
      data={appointments}
      pagination={pagination}
      onPageChange={handlePageChange}
      onSort={handleSort}
      onFilter={handleFilter}
      isLoading={isLoading}
    />
    </>
  );
};

export default DailyAppointmentsTable;

Estructura: components > appointments
Archivo: TodayAppointments.js
--------------------------------------------------
import React, { useState } from 'react';
import DailyAppointmentsTable from '../../components/appointments/DailyAppointmentsTable';
import { Calendar } from 'lucide-react';
import { format } from 'date-fns';
const TodayAppointments = () => {
  const [selectedDate, setSelectedDate] = useState(new Date());

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Today's Appointments</h1>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Calendar className="h-5 w-5 text-gray-500" />
            <input
              type="date"
              value={format(selectedDate, 'yyyy-MM-dd')}
              onChange={(e) => setSelectedDate(new Date(e.target.value))}
              className="px-3 py-2 border rounded-md"
            />
          </div>
          <button className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">
            New Appointment
          </button>
        </div>
      </div>

      <DailyAppointmentsTable selectedDate={selectedDate} />
    </div>
  );
};

export default TodayAppointments;

Estructura: components > clients
Archivo: ClientList.js
--------------------------------------------------
// ClientList.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Table from '../common/Table/Table';
import clientService from '../../services/clientService';
import petService from '../../services/petService';
import toast from 'react-hot-toast';
import Modal from '../common/Modal/Modal';
import ScheduleAppointment from '../ScheduleAppointment';
import { Search, X, Calendar, Clock, PlusCircle } from 'lucide-react'; 

// Componente SearchBox separado
const SearchBox = ({ searchTerm, onSearchChange, onClear }) => (
  <div className="relative w-full max-w-md">
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder="Buscar por nombre..."
      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 
               bg-white placeholder-gray-500 focus:outline-none focus:ring-2 
               focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
    />
    {searchTerm && (
      <button
        onClick={onClear}
        className="absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <X className="h-4 w-4 text-gray-400 hover:text-gray-500" />
      </button>
    )}
  </div>
);

const ClientList = () => {
  // Estados principales
  const [clients, setClients] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [pets, setPets] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState('');
  const searchTimeoutRef = useRef(null);
  const navigate = useNavigate();

  // Estados para el modal de agenda
  const [isSchedulingModalOpen, setIsSchedulingModalOpen] = useState(false);
  const [selectedPet, setSelectedPet] = useState(null);

  // Estados para paginación y ordenamiento
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0,
    last: false
  });

  

  const [sortConfig, setSortConfig] = useState({
    sortBy: 'nombre',
    sortDirection: 'ASC'
  });
  

  // Función para cargar clientes
  const loadClients = useCallback(async () => {
    try {
      setIsLoading(true);
      setError('');

      const paginationRequest = {
        page: pagination.pageNumber,
        size: pagination.pageSize,
        sortBy: sortConfig.sortBy,
        sortDirection: sortConfig.sortDirection
      };

      if (searchTerm && searchTerm.trim().length >= 2) {
        paginationRequest.search = searchTerm.trim();
      }

      const response = await clientService.getClients(paginationRequest);

      if (response?.content) {
        setClients(response.content);
        setPagination(prev => ({
          ...prev,
          totalElements: response.totalElements || 0,
          totalPages: response.totalPages || 0,
          last: response.last || false
        }));
      } else {
        setClients([]);
        setPagination(prev => ({
          ...prev,
          totalElements: 0,
          totalPages: 0,
          last: true
        }));
      }
    } catch (error) {
      console.error('Error cargando clientes:', error);
      toast.error('Error al cargar la lista de clientes');
      setError('Error al cargar los clientes');
      setClients([]);
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, sortConfig, searchTerm]);

  // Manejadores de eventos
  const handleSelectClient = async (client) => {
    try {
      setSelectedClient(client);
      localStorage.setItem('selectedClient', JSON.stringify(client)); // Guardar cliente en localStorage
      setIsLoading(true);
      setError('');
  
      const response = await petService.getPetsByClientId(client.uid);
      if (response.success) {
        setPets(response.mascotas);
        localStorage.setItem('pets', JSON.stringify(response.mascotas)); // Guardar mascotas en localStorage
      } else {
        setError('No se encontraron mascotas para este cliente');
        setPets([]);
      }
    } catch (error) {
      console.error('Error al cargar mascotas:', error);
      setError('Error al cargar las mascotas del cliente');
      setPets([]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleClearSelection = () => {
    setSelectedClient(null);
    setPets([]);
    localStorage.removeItem('selectedClient');
    localStorage.removeItem('pets');
  };
  

  const handleScheduleAppointment = (pet) => {
    console.log('Agendando cita para mascota:', pet);
    setSelectedPet(pet);
    setIsSchedulingModalOpen(true);
  };

  const handleSchedulingSuccess = () => {
    setIsSchedulingModalOpen(false);
    toast.success('Cita agendada exitosamente');
  };

  const handleAddHistory = (pet) => {
    if (!pet || !pet.id) {
      toast.error('Error: No se pudo identificar la mascota');
      return;
    }
    navigate(`/historial-clinico/mascota/${pet.id}`);
  };
  
  

  const handleViewHistory = (pet) => {
    if (!pet || !pet.id) {
      toast.error('Error: No se pudo identificar la mascota');
      return;
    }
    // Navegar a la página de historial
    navigate(`/pets/${pet.id}/history`);
  };
  

  // Manejadores de búsqueda
  const handleSearchChange = useCallback((value) => {
    setSearchTerm(value);
  
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
  
    searchTimeoutRef.current = setTimeout(() => {
      setPagination(prev => ({ ...prev, pageNumber: 0 }));
      // Incluir el término de búsqueda en la solicitud
      loadClients();
    }, 500);
  }, [loadClients]);

  const handleSearchClear = useCallback(() => {
    setSearchTerm('');
    setPagination(prev => ({ ...prev, pageNumber: 0 }));
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    loadClients();
  }, [loadClients]);

  useEffect(() => {
    const savedClient = localStorage.getItem('selectedClient');
    const savedPets = localStorage.getItem('pets');
  
    if (savedClient) {
      setSelectedClient(JSON.parse(savedClient));
    }
    if (savedPets) {
      setPets(JSON.parse(savedPets));
    }
  
    loadClients(); // Carga los clientes al iniciar
  }, [loadClients]);
  
  

  useEffect(() => {
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, []);

  
  

  return (
    <div className="p-6">
      {/* Cabecera y búsqueda */}
      <div className="mb-6 space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold text-gray-900">Clientes</h2>
          {isLoading && (
            <div className="animate-pulse text-sm text-gray-500">
              Cargando...
            </div>
          )}
        </div>

        <div className="flex space-x-4 items-center">
          <SearchBox 
            searchTerm={searchTerm}
            onSearchChange={handleSearchChange}
            onClear={handleSearchClear}
          />
        </div>
        {selectedClient && (
          <button
            onClick={handleClearSelection}
            className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors duration-200"
          >
            Limpiar Selección
          </button>
        )}
      </div>

      {/* Tabla de clientes */}
      <Table
        columns={[
          { 
            key: 'nombre', 
            label: 'Nombre', 
            render: (row) => `${row.nombre} ${row.apellido}`,
            sortable: true
          },
          { 
            key: 'email', 
            label: 'Email',
            sortable: true
          },
          { 
            key: 'telefono', 
            label: 'Teléfono'
          },
          { 
            key: 'actions', 
            label: 'Acciones', 
            render: (row) => (
              <button
                onClick={() => handleSelectClient(row)}
                className="px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded-md 
                         hover:bg-purple-200 transition-colors duration-200"
              >
                Seleccionar
              </button>
            ) 
          }
        ]}
        data={clients}
        pagination={pagination}
        onPageChange={(newPage) => setPagination(prev => ({ ...prev, pageNumber: newPage }))}
        onSort={(key) => setSortConfig(prev => ({
          sortBy: key,
          sortDirection: prev.sortBy === key && prev.sortDirection === 'ASC' ? 'DESC' : 'ASC'
        }))}
        isLoading={isLoading}
      />

      {/* Lista de mascotas del cliente seleccionado */}
      {selectedClient && (
        <div className="mt-8">
          <h3 className="text-xl font-bold mb-6">
            Mascotas de {selectedClient.nombre} {selectedClient.apellido}
          </h3>
          
          {pets.length === 0 ? (
            <div className="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
              <p className="text-gray-500">Este cliente no tiene mascotas registradas</p>
            </div>
          ) : (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {pets.map(pet => (
                <div 
                  key={pet.id}
                  className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden 
                           hover:shadow-md transition-shadow duration-200"
                >
                  <div className="p-4">
                    <h4 className="text-lg font-semibold text-gray-900">{pet.name}</h4>
                    <p className="text-sm text-gray-500 mt-1">
                      {pet.species} ({pet.breed})
                    </p>
                    <p className="text-sm text-gray-500">
                      {pet.age} años
                    </p>
                    
                    <div className="mt-4 space-y-2">
                      <button
                        onClick={() => handleScheduleAppointment(pet)}
                        className="w-full flex items-center justify-center px-4 py-2 
                                 bg-purple-100 text-purple-700 rounded-md
                                 hover:bg-purple-200 transition-colors duration-200"
                      >
                        <Calendar className="w-4 h-4 mr-2" />
                        Agendar Cita
                      </button>

                      <button
                        onClick={() => handleViewHistory(pet)}
                        className="w-full flex items-center justify-center px-4 py-2 
             bg-blue-100 text-blue-700 rounded-md
             hover:bg-blue-200 transition-colors duration-200"
                      >
                        <Clock className="w-4 h-4 mr-2" />
                        Ver Historial
                      </button>

                      <button
                        onClick={() => handleAddHistory(pet)}
                        className="w-full flex items-center justify-center px-4 py-2 
             bg-green-100 text-green-700 rounded-md
             hover:bg-green-200 transition-colors duration-200"
                      >
                        <PlusCircle className="w-4 h-4 mr-2" />
                        Agregar Historial
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Mensajes de error */}
      {error && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-red-600">{error}</p>
        </div>
      )}

      {/* Modal de agendamiento */}
      {isSchedulingModalOpen && selectedPet && selectedClient && (
        <Modal
          isOpen={isSchedulingModalOpen}
          onClose={() => setIsSchedulingModalOpen(false)}
          title={`Agendar Cita para ${selectedPet.name}`}
        >
          <ScheduleAppointment
            petId={selectedPet.id}
            clientId={selectedClient.uid}
            onSuccess={handleSchedulingSuccess}
            onCancel={() => setIsSchedulingModalOpen(false)}
          />
        </Modal>
      )}
      
    </div>
  );
};

export default ClientList;

Estructura: components > common > Modal
Archivo: index.js
--------------------------------------------------
export { default } from './Modal';

Estructura: components > common > Modal
Archivo: Modal.jsx
--------------------------------------------------
import React from 'react';
import { X } from 'lucide-react';

const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg w-full max-w-2xl p-8">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>
        <div className="flex justify-center">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;

Estructura: components > common > Table
Archivo: Table.js
--------------------------------------------------
import React from 'react';
import { ChevronLeft, ChevronRight, ArrowUpDown } from 'lucide-react';

const Table = ({
  columns,
  data,
  pagination,
  onPageChange,
  onSort,
  onFilter,
  isLoading
}) => {
  return (
    <div className="w-full">
      {/* Filtros */}
      <div className="mb-4 flex gap-4">
        {columns
          .filter(column => column.filterable)
          .map(column => (
            <div key={column.key} className="flex items-center">
              <input
                type="text"
                placeholder={`Filter by ${column.label}`}
                className="px-3 py-2 border rounded-md"
                onChange={(e) => onFilter(column.key, e.target.value)}
              />
            </div>
          ))}
      </div>

      {/* Tabla */}
      <div className="overflow-x-auto border rounded-lg">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              {columns.map(column => (
                <th
                  key={column.key}
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  <div className="flex items-center space-x-1">
                    <span>{column.label}</span>
                    {column.sortable && (
                      <button
                        onClick={() => onSort(column.key)}
                        className="hover:text-gray-700"
                      >
                        <ArrowUpDown className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {isLoading ? (
              <tr>
                <td colSpan={columns.length} className="px-6 py-4 text-center">
                  Loading...
                </td>
              </tr>
            ) : data.length === 0 ? (
              <tr>
                <td colSpan={columns.length} className="px-6 py-4 text-center">
                  No data available
                </td>
              </tr>
            ) : (
              data.map((row, index) => (
                <tr key={index}>
                  {columns.map(column => (
                    <td key={column.key} className="px-6 py-4 whitespace-nowrap">
                      {column.render ? column.render(row) : row[column.key]}
                    </td>
                  ))}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Paginación */}
      <div className="flex items-center justify-between px-4 py-3 border-t">
        <div className="flex items-center">
          <span className="text-sm text-gray-700">
            Showing {pagination.pageSize * pagination.pageNumber + 1} to{' '}
            {Math.min(
              pagination.pageSize * (pagination.pageNumber + 1),
              pagination.totalElements
            )}{' '}
            of {pagination.totalElements} entries
          </span>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => onPageChange(pagination.pageNumber - 1)}
            disabled={pagination.pageNumber === 0}
            className="px-3 py-1 border rounded-md disabled:opacity-50"
          >
            <ChevronLeft className="h-5 w-5" />
          </button>
          <span className="px-4 py-1">
            Page {pagination.pageNumber + 1} of {pagination.totalPages}
          </span>
          <button
            onClick={() => onPageChange(pagination.pageNumber + 1)}
            disabled={pagination.pageNumber === pagination.totalPages - 1}
            className="px-3 py-1 border rounded-md disabled:opacity-50"
          >
            <ChevronRight className="h-5 w-5" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Table;

Estructura: components > inventory
Archivo: InventoryForm.js
--------------------------------------------------
// components/inventory/InventoryForm.js
import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';

const InventoryForm = ({ initialData, onSubmit, onCancel }) => {
  // Esquema de validación
  const validationSchema = Yup.object().shape({
    name: Yup.string()
      .required('El nombre es requerido')
      .min(2, 'El nombre debe tener al menos 2 caracteres'),
    quantity: Yup.number()
      .required('La cantidad es requerida')
      .min(0, 'La cantidad no puede ser negativa'),
    minThreshold: Yup.number()
      .required('El umbral mínimo es requerido')
      .min(0, 'El umbral mínimo no puede ser negativo'),
    price: Yup.number()
      .required('El precio es requerido')
      .min(0, 'El precio no puede ser negativo'),
    recommendedOrderQuantity: Yup.number()
      .min(0, 'La cantidad recomendada no puede ser negativa')
  });

  // Configuración de Formik
  const formik = useFormik({
    initialValues: {
      name: initialData?.name || '',
      quantity: initialData?.quantity || '',
      minThreshold: initialData?.minThreshold || '',
      price: initialData?.price || '',
      recommendedOrderQuantity: initialData?.recommendedOrderQuantity || ''
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        await onSubmit(values);
      } catch (error) {
        formik.setStatus({ error: error.message });
      }
    }
  });

  return (
    <form onSubmit={formik.handleSubmit} className="space-y-6 w-full">
      {/* Nombre del producto */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Nombre del producto
        </label>
        <input
          type="text"
          name="name"
          {...formik.getFieldProps('name')}
          className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm
            ${formik.touched.name && formik.errors.name ? 'border-red-300' : 'border-gray-300'}
            focus:ring-purple-500 focus:border-purple-500`}
          disabled={initialData ? true : false}
        />
        {formik.touched.name && formik.errors.name && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.name}</p>
        )}
      </div>

      {/* Cantidad */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Cantidad
        </label>
        <input
          type="number"
          name="quantity"
          {...formik.getFieldProps('quantity')}
          className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm
            ${formik.touched.quantity && formik.errors.quantity ? 'border-red-300' : 'border-gray-300'}
            focus:ring-purple-500 focus:border-purple-500`}
        />
        {formik.touched.quantity && formik.errors.quantity && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.quantity}</p>
        )}
      </div>

      {/* Umbral mínimo */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Umbral mínimo
        </label>
        <input
          type="number"
          name="minThreshold"
          {...formik.getFieldProps('minThreshold')}
          className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm
            ${formik.touched.minThreshold && formik.errors.minThreshold ? 'border-red-300' : 'border-gray-300'}
            focus:ring-purple-500 focus:border-purple-500`}
        />
        {formik.touched.minThreshold && formik.errors.minThreshold && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.minThreshold}</p>
        )}
      </div>

      {/* Precio */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Precio
        </label>
        <input
          type="number"
          name="price"
          step="0.01"
          {...formik.getFieldProps('price')}
          className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm
            ${formik.touched.price && formik.errors.price ? 'border-red-300' : 'border-gray-300'}
            focus:ring-purple-500 focus:border-purple-500`}
        />
        {formik.touched.price && formik.errors.price && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.price}</p>
        )}
      </div>

      {/* Cantidad recomendada de pedido */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          Cantidad recomendada de pedido
        </label>
        <input
          type="number"
          name="recommendedOrderQuantity"
          {...formik.getFieldProps('recommendedOrderQuantity')}
          className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm
            ${formik.touched.recommendedOrderQuantity && formik.errors.recommendedOrderQuantity ? 'border-red-300' : 'border-gray-300'}
            focus:ring-purple-500 focus:border-purple-500`}
        />
        {formik.touched.recommendedOrderQuantity && formik.errors.recommendedOrderQuantity && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.recommendedOrderQuantity}</p>
        )}
      </div>

      {/* Botones de acción */}
      <div className="flex justify-end space-x-3 pt-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
        >
          Cancelar
        </button>
        <button
          type="submit"
          disabled={formik.isSubmitting || !formik.isValid}
          className="px-4 py-2 text-sm font-medium text-white bg-purple-600 border border-transparent rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50"
        >
          {initialData ? 'Actualizar' : 'Guardar'}
        </button>
      </div>

      {/* Mensaje de error */}
      {formik.status?.error && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">{formik.status.error}</p>
        </div>
      )}
    </form>
  );
};

export default InventoryForm;

Estructura: components > Layout
Archivo: MainLayout.js
--------------------------------------------------
import React from 'react';
import Sidebar from './Sidebar';
import Navbar from './Navbar';

const MainLayout = ({ children }) => {
  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Navbar */}
        <Navbar />

        {/* Content Area */}
        <main className="flex-1 overflow-y-auto p-6">
          {children}
        </main>
      </div>
    </div>
  );
};

export default MainLayout;

Estructura: components > Layout
Archivo: Navbar.js
--------------------------------------------------
import React from 'react';
import { useAuth } from '../../context/AuthContext';
import { ChevronDown } from 'lucide-react';

const Navbar = () => {
  const { user } = useAuth();

  return (
    <div className="h-16 bg-white border-b border-gray-200 flex items-center justify-between px-6">
      <h1 className="text-xl font-semibold text-gray-800">
        {/* Aquí podrías poner el título de la página actual */}
      </h1>
      
      <div className="flex items-center space-x-4">
        <div className="flex items-center">
          <div className="text-sm">
            <span className="block font-medium text-gray-900">{user?.email}</span>
            <span className="block text-gray-500">{user?.roles?.[0]}</span>
          </div>
          <ChevronDown className="ml-2 h-4 w-4 text-gray-400" />
        </div>
      </div>
    </div>
  );
};
export default Navbar;

Estructura: components > Layout
Archivo: Sidebar.js
--------------------------------------------------
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { 
  HomeIcon, 
  CalendarIcon, 
  UsersIcon, 
  PawPrintIcon,
  PackageIcon,
  UserCogIcon,
  UserIcon,
  LogOutIcon,
  CreditCardIcon
} from 'lucide-react';



// Mapeo de rutas por rol
const roleRoutes = {
  VETERINARIO: [
    { path: '/dashboard', name: 'Dashboard', icon: HomeIcon },
    { path: '/appointments', name: "Today's Appointments", icon: CalendarIcon },
    { path: '/clients', name: 'Clients', icon: UsersIcon },
    { path: '/pets', name: 'Pets', icon: PawPrintIcon },
    { path: '/inventory', name: 'Inventory', icon: PackageIcon },
    { path: '/user-management', name: 'User Management', icon: UserCogIcon },
    { path: '/profile', name: 'My Profile', icon: UserIcon },
    { path: '/services', name: 'Services', icon: PackageIcon },

  ],
  RECEPCIONISTA: [
    { path: '/dashboard', name: 'Dashboard', icon: HomeIcon },
    { path: '/appointments', name: "Today's Appointments", icon: CalendarIcon },
    { path: '/clients', name: 'Clients', icon: UsersIcon },
    { path: '/pets', name: 'Pets', icon: PawPrintIcon },
    { path: '/inventory', name: 'Inventory', icon: PackageIcon },
    { path: '/profile', name: 'My Profile', icon: UserIcon },
  ],
  CLIENTE: [
    { path: '/dashboard', name: 'Dashboard', icon: HomeIcon },
    //{ path: '/my-appointments', name: 'My Appointments', icon: CalendarIcon },
    { path: '/my-pets', name: 'My Pets-Appointments', icon: PawPrintIcon },
    { path: '/profile', name: 'My Profile', icon: UserIcon },
    { path: '/services', name: 'Services', icon: PackageIcon },
    { path: '/my-appointments', name: "Today's Appointments", icon: CalendarIcon },
    { path: '/payment-history', name: 'Payment History', icon: CreditCardIcon },
  ],
  ADMINISTRADOR: [
    { path: '/dashboard', name: 'Dashboard', icon: HomeIcon },
    { path: '/appointments', name: "Today's Appointments", icon: CalendarIcon },
    { path: '/clients', name: 'Clients', icon: UsersIcon },
    { path: '/pets', name: 'Pets', icon: PawPrintIcon },
    { path: '/inventory', name: 'Inventory', icon: PackageIcon },
    { path: '/profile', name: 'My Profile', icon: UserIcon },
    { path : '/admin/services', name: 'Services', icon: PackageIcon },
    { path: '/reports/services', name: 'Service Reports', icon: PackageIcon }, // NUEVA RUTA
  ],
};

const Sidebar = () => {
  const { user, logout } = useAuth();
  const location = useLocation();
  
  // Obtener las rutas correspondientes al rol del usuario
  const userRoutes = user?.roles?.[0] ? roleRoutes[user.roles[0]] : [];

  return (
    <div className="flex flex-col h-full w-64 bg-white border-r border-gray-200">
      {/* Logo */}
      <div className="p-6">
        <Link to="/dashboard" className="flex items-center space-x-2">
          <img src="/logo.png" alt="PurplePaw" className="h-8 w-auto" />
          <span className="text-xl font-bold text-gray-900">🐾PurplePaw</span>
        </Link>
      </div>

      {/* Navigation Links */}
      <nav className="flex-1 px-4 space-y-1">
        {userRoutes.map((route) => {
          const Icon = route.icon;
          return (
            <Link
              key={route.path}
              to={route.path}
              className={`flex items-center px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                location.pathname === route.path
                  ? 'bg-[#C792DF] text-white'
                  : 'text-gray-600 hover:bg-purple-50 hover:text-[#C792DF]'
              }`}
            >
              <Icon className="mr-3 h-5 w-5" />
              {route.name}
            </Link>
          );
        })}
      </nav>

      {/* Logout Button */}
      <div className="p-4 border-t border-gray-200">
        <button
          onClick={logout}
          className="flex items-center w-full px-4 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-purple-50 hover:text-[#C792DF]"
        >
          <LogOutIcon className="mr-3 h-5 w-5" />
          Log out
        </button>
      </div>
    </div>
  );
};
export default Sidebar;

Estructura: components > recepcionist
Archivo: ClientListReceptionist.js
--------------------------------------------------
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Table from '../../components//common/Table/Table';
import clientService from '../../services/clientService';
import petService from '../../services/petService';
import toast from 'react-hot-toast';
import Modal from '../../components/common/Modal/Modal';
import ScheduleAppointment from '../ScheduleAppointment';
import { Search, X, Calendar, Clock } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';
// Componente de búsqueda reutilizable
const SearchBox = ({ searchTerm, onSearchChange, onClear }) => (
  <div className="relative w-full max-w-md">
    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search className="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => onSearchChange(e.target.value)}
      placeholder="Buscar por nombre..."
      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 
               bg-white placeholder-gray-500 focus:outline-none focus:ring-2 
               focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
    />
    {searchTerm && (
      <button
        onClick={onClear}
        className="absolute inset-y-0 right-0 pr-3 flex items-center"
      >
        <X className="h-4 w-4 text-gray-400 hover:text-gray-500" />
      </button>
    )}
  </div>
);

const ClientListReceptionist = () => {
  // Estados y hooks necesarios
  const { user } = useAuth();
  const navigate = useNavigate();
  const [clients, setClients] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [pets, setPets] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState('');
  const searchTimeoutRef = useRef(null);
  const [isSchedulingModalOpen, setIsSchedulingModalOpen] = useState(false);
  const [selectedPet, setSelectedPet] = useState(null);

  // Estados para paginación
  const [pagination, setPagination] = useState({
    pageNumber: 0,
    pageSize: 10,
    totalElements: 0,
    totalPages: 0,
    last: false
  });

  // Estados para ordenamiento
  const [sortConfig, setSortConfig] = useState({
    sortBy: 'nombre',
    sortDirection: 'ASC'
  });

  // Cargar clientes con paginación y búsqueda
  const loadClients = useCallback(async () => {
    try {
      setIsLoading(true);
      setError('');

      const paginationRequest = {
        page: pagination.pageNumber,
        size: pagination.pageSize,
        sortBy: sortConfig.sortBy,
        sortDirection: sortConfig.sortDirection
      };

      if (searchTerm && searchTerm.trim().length >= 2) {
        paginationRequest.search = searchTerm.trim();
      }

      const response = await clientService.getClients(paginationRequest);
      
      if (response?.content) {
        setClients(response.content);
        setPagination(prev => ({
          ...prev,
          totalElements: response.totalElements || 0,
          totalPages: response.totalPages || 0,
          last: response.last || false
        }));
      }
    } catch (error) {
      console.error('Error cargando clientes:', error);
      toast.error('Error al cargar la lista de clientes');
      setError('Error al cargar los clientes');
    } finally {
      setIsLoading(false);
    }
  }, [pagination.pageNumber, pagination.pageSize, sortConfig, searchTerm]);

  // Cargar datos iniciales
  useEffect(() => {
    loadClients();
  }, [loadClients]);

  // Manejadores de eventos
  const handleSelectClient = async (client) => {
    try {
      setSelectedClient(client);
      setIsLoading(true);
      setError('');

      const response = await petService.getPetsByClientId(client.uid);
      if (response.success) {
        setPets(response.mascotas);
      } else {
        setError('No se encontraron mascotas para este cliente');
        setPets([]);
      }
    } catch (error) {
      console.error('Error al cargar mascotas:', error);
      setError('Error al cargar las mascotas del cliente');
      setPets([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleScheduleAppointment = (pet) => {
    setSelectedPet(pet);
    setIsSchedulingModalOpen(true);
  };

  const handleSchedulingSuccess = () => {
    setIsSchedulingModalOpen(false);
    toast.success('Cita agendada exitosamente');
  };

  const handleViewHistory = (pet) => {
    if (!pet || !pet.id) {
      toast.error('Error: No se pudo identificar la mascota');
      return;
    }
    navigate(`/pets/${pet.id}/history`);
  };

  // Manejadores de búsqueda
  const handleSearchChange = useCallback((value) => {
    setSearchTerm(value);
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = setTimeout(() => {
      setPagination(prev => ({ ...prev, pageNumber: 0 }));
      loadClients();
    }, 500);
  }, [loadClients]);

  return (
    <div className="p-6">
      {/* Cabecera y búsqueda */}
      <div className="mb-6 space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-bold text-gray-900">Clientes</h2>
          {isLoading && (
            <div className="animate-pulse text-sm text-gray-500">
              Cargando...
            </div>
          )}
        </div>

        <SearchBox 
          searchTerm={searchTerm}
          onSearchChange={handleSearchChange}
          onClear={() => {
            setSearchTerm('');
            setPagination(prev => ({ ...prev, pageNumber: 0 }));
            loadClients();
          }}
        />
      </div>

      {/* Tabla de clientes */}
      <Table
        columns={[
          { 
            key: 'nombre', 
            label: 'Nombre', 
            render: (row) => `${row.nombre} ${row.apellido}`,
            sortable: true
          },
          { 
            key: 'email', 
            label: 'Email',
            sortable: true
          },
          { 
            key: 'telefono', 
            label: 'Teléfono'
          },
          { 
            key: 'actions', 
            label: 'Acciones', 
            render: (row) => (
              <button
                onClick={() => handleSelectClient(row)}
                className="px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded-md 
                         hover:bg-purple-200 transition-colors duration-200"
              >
                Ver mascotas
              </button>
            ) 
          }
        ]}
        data={clients}
        pagination={pagination}
        onPageChange={(newPage) => setPagination(prev => ({ ...prev, pageNumber: newPage }))}
        onSort={(key) => setSortConfig(prev => ({
          sortBy: key,
          sortDirection: prev.sortBy === key && prev.sortDirection === 'ASC' ? 'DESC' : 'ASC'
        }))}
        isLoading={isLoading}
      />

      {/* Lista de mascotas del cliente seleccionado */}
      {selectedClient && (
        <div className="mt-8">
          <h3 className="text-xl font-bold mb-6">
            Mascotas de {selectedClient.nombre} {selectedClient.apellido}
          </h3>
          
          {pets.length === 0 ? (
            <div className="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
              <p className="text-gray-500">Este cliente no tiene mascotas registradas</p>
            </div>
          ) : (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {pets.map(pet => (
                <div 
                  key={pet.id}
                  className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden 
                           hover:shadow-md transition-shadow duration-200"
                >
                  <div className="p-4">
                    <h4 className="text-lg font-semibold text-gray-900">{pet.name}</h4>
                    <p className="text-sm text-gray-500 mt-1">
                      {pet.species} ({pet.breed})
                    </p>
                    <p className="text-sm text-gray-500">
                      {pet.age} años
                    </p>
                    
                    <div className="mt-4 space-y-2">
                      <button
                        onClick={() => handleScheduleAppointment(pet)}
                        className="w-full flex items-center justify-center px-4 py-2 
                                 bg-purple-100 text-purple-700 rounded-md
                                 hover:bg-purple-200 transition-colors duration-200"
                      >
                        <Calendar className="w-4 h-4 mr-2" />
                        Agendar Cita
                      </button>

                      <button
                        onClick={() => handleViewHistory(pet)}
                        className="w-full flex items-center justify-center px-4 py-2 
                                 bg-blue-100 text-blue-700 rounded-md
                                 hover:bg-blue-200 transition-colors duration-200"
                      >
                        <Clock className="w-4 h-4 mr-2" />
                        Ver Historial
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Mensajes de error */}
      {error && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-red-600">{error}</p>
        </div>
      )}

      {/* Modal de agendamiento */}
      {isSchedulingModalOpen && selectedPet && selectedClient && (
        <Modal
          isOpen={isSchedulingModalOpen}
          onClose={() => setIsSchedulingModalOpen(false)}
          title={`Agendar Cita para ${selectedPet.name}`}
        >
          <ScheduleAppointment
            petId={selectedPet.id}
            clientId={selectedClient.uid}
            onSuccess={handleSchedulingSuccess}
            onCancel={() => setIsSchedulingModalOpen(false)}
          />
        </Modal>
      )}
    </div>
  );
};

export default ClientListReceptionist;

Estructura: components > users
Archivo: UserForm.js
--------------------------------------------------
import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';

const UserForm = ({ user, onSubmit, onCancel }) => {
  // Esquema de validación corregido
  const validationSchema = Yup.object().shape({
    nombre: Yup.string()
      .required('Name is required')
      .min(2, 'Name must be at least 2 characters'),
    apellido: Yup.string()
      .required('Last name is required')
      .min(2, 'Last name must be at least 2 characters'),
    email: Yup.string()
      .email('Invalid email address')
      .required('Email is required'),
    telefono: Yup.string()
      .required('Phone number is required')
      .matches(/^\d{10}$/, 'Phone number must be exactly 10 digits'),
    roles: Yup.array()
      .min(1, 'At least one role is required')
      .required('Role is required'),
    // Validación condicional corregida para password
    password: Yup.string().when('isNewUser', (isNewUser, schema) => {
      return isNewUser ? 
        schema.required('Password is required').min(6, 'Password must be at least 6 characters') :
        schema.notRequired();
    })
  });

  const formik = useFormik({
    initialValues: {
      nombre: user?.nombre || '',
      apellido: user?.apellido || '',
      email: user?.email || '',
      telefono: user?.telefono || '',
      roles: user?.roles || ['CLIENTE'],
      password: '',
      isNewUser: !user // Flag para determinar si es un nuevo usuario
    },
    validationSchema,
    onSubmit: async (values) => {
      // Remover el flag isNewUser antes de enviar
      const { isNewUser, ...submitData } = values;
      try {
        await onSubmit(submitData);
      } catch (error) {
        formik.setStatus({ error: error.message });
      }
    }
  });

  return (
    <form onSubmit={formik.handleSubmit} className="space-y-6 w-full min-w-[500px]">
      {/* Nombre */}
      <div className="space-y-2">
        <label className="block text-base font-medium text-gray-700">
          Name
        </label>
        <input
          type="text"
          name="nombre"
          placeholder="Enter name"
          {...formik.getFieldProps('nombre')}
          className={`
            mt-1 block w-full px-4 py-3 rounded-md 
            border border-gray-300 shadow-sm
            text-base placeholder:text-gray-400
            focus:border-purple-500 focus:ring-2 focus:ring-purple-500 
            ${formik.touched.nombre && formik.errors.nombre ? 'border-red-300' : ''}
          `}
        />
        {formik.touched.nombre && formik.errors.nombre && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.nombre}</p>
        )}
      </div>

      {/* Apellido */}
      <div className="space-y-2">
        <label className="block text-base font-medium text-gray-700">
          Last Name
        </label>
        <input
          type="text"
          name="apellido"
          placeholder="Enter last name"
          {...formik.getFieldProps('apellido')}
          className={`
            mt-1 block w-full px-4 py-3 rounded-md 
            border border-gray-300 shadow-sm
            text-base placeholder:text-gray-400
            focus:border-purple-500 focus:ring-2 focus:ring-purple-500 
            ${formik.touched.apellido && formik.errors.apellido ? 'border-red-300' : ''}
          `}
        />
        {formik.touched.apellido && formik.errors.apellido && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.apellido}</p>
        )}
      </div>

      {/* Email */}
      <div className="space-y-2">
        <label className="block text-base font-medium text-gray-700">
          Email
        </label>
        <input
          type="email"
          name="email"
          placeholder="example@email.com"
          {...formik.getFieldProps('email')}
          className={`
            mt-1 block w-full px-4 py-3 rounded-md 
            border border-gray-300 shadow-sm
            text-base placeholder:text-gray-400
            focus:border-purple-500 focus:ring-2 focus:ring-purple-500 
            ${formik.touched.email && formik.errors.email ? 'border-red-300' : ''}
          `}
        />
        {formik.touched.email && formik.errors.email && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.email}</p>
        )}
      </div>

      {/* Password (solo para nuevos usuarios) */}
      {!user && (
        <div className="space-y-2">
          <label className="block text-base font-medium text-gray-700">
            Password
          </label>
          <input
            type="password"
            name="password"
            placeholder="Enter password"
            {...formik.getFieldProps('password')}
            className={`
              mt-1 block w-full px-4 py-3 rounded-md 
              border border-gray-300 shadow-sm
              text-base placeholder:text-gray-400
              focus:border-purple-500 focus:ring-2 focus:ring-purple-500 
              ${formik.touched.password && formik.errors.password ? 'border-red-300' : ''}
            `}
          />
          {formik.touched.password && formik.errors.password && (
            <p className="mt-1 text-sm text-red-600">{formik.errors.password}</p>
          )}
        </div>
      )}

      {/* Teléfono */}
      <div className="space-y-2">
        <label className="block text-base font-medium text-gray-700">
          Phone
        </label>
        <input
          type="tel"
          name="telefono"
          placeholder="Enter phone number"
          {...formik.getFieldProps('telefono')}
          className={`
            mt-1 block w-full px-4 py-3 rounded-md 
            border border-gray-300 shadow-sm
            text-base placeholder:text-gray-400
            focus:border-purple-500 focus:ring-2 focus:ring-purple-500 
            ${formik.touched.telefono && formik.errors.telefono ? 'border-red-300' : ''}
          `}
        />
        {formik.touched.telefono && formik.errors.telefono && (
          <p className="mt-1 text-sm text-red-600">{formik.errors.telefono}</p>
        )}
      </div>

      {/* Roles */}
      <div className="space-y-2">
        <label className="block text-base font-medium text-gray-700">
          Role
        </label>
        <select
          name="roles"
          value={formik.values.roles[0]}
          onChange={(e) => formik.setFieldValue('roles', [e.target.value])}
          className="
            mt-1 block w-full px-4 py-3 rounded-md 
            border border-gray-300 shadow-sm
            text-base bg-white
            focus:border-purple-500 focus:ring-2 focus:ring-purple-500
          "
        >
          <option value="CLIENTE">Client</option>
          <option value="RECEPCIONISTA">Receptionist</option>
          <option value="VETERINARIO">Veterinarian</option>
        </select>
      </div>

      {/* Botones */}
      <div className="flex justify-end space-x-4 pt-6">
        <button
          type="button"
          onClick={onCancel}
          className="
            px-6 py-3 border border-gray-300 rounded-md
            text-base font-medium text-gray-700
            hover:bg-gray-50 transition-colors
            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500
          "
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={formik.isSubmitting}
          className="
            px-6 py-3 border border-transparent rounded-md
            text-base font-medium text-white
            bg-purple-600 hover:bg-purple-700
            transition-colors
            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500
            disabled:opacity-50 disabled:cursor-not-allowed
          "
        >
          {user ? 'Update' : 'Create'}
        </button>
      </div>

      {/* Mensaje de error general */}
      {formik.status?.error && (
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">{formik.status.error}</p>
        </div>
      )}
    </form>
  );
};

export default UserForm;

Estructura: config
Archivo: axios.js
--------------------------------------------------
// src/config/axios.js

import axios from 'axios';


const axiosInstance = axios.create({
  baseURL: 'http://localhost:8080/api',
  timeout: 25000,
});

// Interceptor para agregar el token a todas las solicitudes
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor para manejar errores de respuesta
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Aquí puedes manejar la redirección al login o renovar el token
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;

Estructura: context
Archivo: AuthContext.js
--------------------------------------------------
import React, { createContext, useState, useContext, useEffect } from 'react';
import authService from '../services/authService';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Verificar si hay una sesión activa al cargar la aplicación
  useEffect(() => {
    const initializeAuth = () => {
      const currentUser = authService.getCurrentUser();
      const token = authService.getToken();
      
      if (currentUser && token) {
        setUser(currentUser);
        setToken(token);
      }
      
      setIsLoading(false);
    };

    initializeAuth();
  }, []);

  const login = (userData, tokenData) => {
    setUser(userData);
    setToken(tokenData);
    localStorage.setItem('token', tokenData);
  };

  const logout = () => {
    authService.logout();
    setUser(null);
    setToken(null);
    
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      token, 
      login, 
      logout,
      isLoading,
      isAuthenticated: !!token
    }}>
      {!isLoading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
};

Estructura: routes
Archivo: AppRoutes.js
--------------------------------------------------
// src/routes/AppRoutes.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Login from '../components/Login';
import Register from '../components/Register';
import Dashboard from '../components/Dashboard';
import MyProfile from '../components/MyProfile';
import ClientList from '../components/clients/ClientList';
import TodayAppointments from '../components/appointments/TodayAppointments'; // Nueva importación
import InventoryManagement from '../components/InventoryManagement'; // Nueva importación
import UserManagement from '../components/UserManagement';
import MainLayout from '../components/Layout/MainLayout';
import PetMedicalHistory from '../components/PetMedicalHistory';
import { useAuth } from '../context/AuthContext';
import MyPets from '../components/MyPets';
import ServiceList from '../components/ServiceList';
import ServiceManagement from '../components/ServiceManagement';
import ClientAppointments from '../components/ClientAppointments';
import AddMedicalRecord from '../components/AddMedicalRecord';
import ServiceReports from '../components/ServiceReports';
import PaymentHistory from '../components/PaymentHistory';
import PaymentDetails from '../components/PaymentDetails';
import ServiceForm from '../components/ServiceForm';


// Componente para rutas protegidas
const PrivateRoute = ({ children, allowedRoles = [] }) => {
  const { user } = useAuth();
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }

  // Si hay roles permitidos definidos, verificar si el usuario tiene acceso
  if (allowedRoles.length > 0 && !allowedRoles.includes(user.roles[0])) {
    return <Navigate to="/dashboard" replace />;
  }

  return <MainLayout>{children}</MainLayout>;
};

const AppRoutes = () => {
  const { user } = useAuth();

  return (
    <Router>
      <Routes>
        {/* Rutas públicas */}
        <Route path="/login" element={
          user ? <Navigate to="/dashboard" replace /> : <Login />
        } />
        <Route path="/register" element={
          user ? <Navigate to="/dashboard" replace /> : <Register />
        } />
        
        {/* Rutas protegidas */}
        <Route path="/dashboard" element={
          <PrivateRoute>
            <Dashboard />
          </PrivateRoute>
        } />
        
        {/* Ruta de citas - Solo accesible para VETERINARIO y RECEPCIONISTA */}
        <Route path="/appointments" element={
          <PrivateRoute allowedRoles={['VETERINARIO', 'RECEPCIONISTA']}>
            <TodayAppointments />
          </PrivateRoute>
        } />

        
        
        <Route path="/profile" element={
          <PrivateRoute>
            <MyProfile />
          </PrivateRoute>
        } />
        <Route path="/my-pets" element={
          <PrivateRoute>
            <MyPets />
          </PrivateRoute>} />
        {/* Ruta por defecto */}
        <Route path="/" element={
          <Navigate to="/dashboard" replace />
        } />



        <Route path="/clients" element={
          <PrivateRoute allowedRoles={['VETERINARIO', 'RECEPCIONISTA']}>
            <ClientList />
          </PrivateRoute>
        } />
        <Route path="/inventory" element={
          <PrivateRoute allowedRoles={['VETERINARIO', 'RECEPCIONISTA']}>
            <InventoryManagement />
          </PrivateRoute>
        } />
        <Route path="/user-management" element={
          <PrivateRoute allowedRoles={['VETERINARIO']}>
            <UserManagement />
          </PrivateRoute>
        } />
        <Route
          path="/pets/:petId/history"
          element={
            <PrivateRoute >
              <PetMedicalHistory />
            </PrivateRoute>
          }
        />
        <Route
          path="/services"
          element={
            <PrivateRoute>
              <ServiceList />
            </PrivateRoute>
          }
        />
       {/* Ruta de gestión de servicios - Solo accesible para ADMIN */}
        <Route path="/admin/services" element={
          <PrivateRoute allowedRoles={['ADMINISTRADOR']}>
            <ServiceManagement />
          </PrivateRoute>
        } />

        <Route path="/admin/services/new" element={
          <PrivateRoute allowedRoles={['ADMINISTRADOR']}>
            <ServiceForm  />
          </PrivateRoute>
        }/>

        <Route path="/admin/services/edit/:id" element={
          <PrivateRoute allowedRoles={['ADMINISTRADOR']}>
            <ServiceForm  />
          </PrivateRoute>
        }/>

        {/* Ruta de citas del cliente - Solo accesible para CLIENTE */}

        <Route path="/my-appointments" element={
          <PrivateRoute allowedRoles={['CLIENTE']}>
            <ClientAppointments />
          </PrivateRoute>
        } />
        
        <Route path="/historial-clinico/mascota/:petId" element={
          <PrivateRoute allowedRoles={['VETERINARIO']}>
            <AddMedicalRecord />
          </PrivateRoute>
        } />

        <Route path="/reports/services" element={
          <PrivateRoute allowedRoles={['ADMINISTRADOR']}>
            <ServiceReports />
          </PrivateRoute>
        } />

        <Route path="/payment-history" element={
          <PrivateRoute allowedRoles={['CLIENTE']}>
            <PaymentHistory />
          </PrivateRoute>
        } />
        <Route path="/payment-history/:paymentId" element={
          <PrivateRoute allowedRoles={['CLIENTE']}>
            <PaymentDetails />
          </PrivateRoute>
        } />


        

        {/* Ruta 404 */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Router>
  );
};

export default AppRoutes;

Estructura: services
Archivo: authService.js
--------------------------------------------------
// src/services/authService.js

// Importamos axios para realizar peticiones HTTP
import axios from 'axios';

//revision para ver que se esta utilizando el import
// URL base de nuestra API backend
const API_URL = 'http://localhost:8080/api';

const axiosInstance = axios.create({
  baseURL: API_URL, // URL base que se utilizará para todas las peticiones
  headers: {
    'Content-Type': 'application/json', // Indicamos que enviaremos JSON en las peticiones
  },
  timeout: 5000, // Timeout de 5 segundos para las peticiones
});

/**
 * Interceptor para peticiones
 * Se ejecuta antes de cada petición
 * Aquí agregamos el token de autenticación si existe
 */
axiosInstance.interceptors.request.use(
  (config) => {
    // Obtener el token del localStorage
    const token = localStorage.getItem('token');
    
    // Si existe un token, lo agregamos al header de la petición
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    return config;
  },
  (error) => {
    // Si hay un error en la petición, lo rechazamos
    return Promise.reject(error);
  }
);

/**
 * Interceptor para respuestas
 * Se ejecuta después de cada respuesta del servidor
 */
axiosInstance.interceptors.response.use(
  (response) => {
    // Verificar si la respuesta indica error
    if (!response.data.success) {
      // Crear un error con la estructura de la respuesta
      const error = new Error(response.data.error.message);
      error.code = response.data.error.code;
      throw error;
    }
    return response;
  },
  (error) => {
    // Si hay un error de respuesta del servidor
    if (error.response?.data) {
      // Usar la estructura de error del backend si está disponible
      const serverError = new Error(
        error.response.data.error?.message || 'Ha ocurrido un error en el servidor'
      );
      serverError.code = error.response.data.error?.code || 'SERVER_ERROR';
      throw serverError;
    }
    
    // Error de red o servidor no disponible
    if (error.request) {
      const networkError = new Error('No se pudo conectar con el servidor. Por favor, verifica tu conexión.');
      networkError.code = 'NETWORK_ERROR';
      throw networkError;
    }
    
    // Otros errores
    const genericError = new Error('Ha ocurrido un error inesperado');
    genericError.code = 'UNKNOWN_ERROR';
    throw genericError;
  }
);

/**
 * Servicio de autenticación
 * Contiene todos los métodos relacionados con la autenticación
 */
const authService = {
  async login(credentials) {
    try {
      const response = await axiosInstance.post('/auth/login', credentials);
      
      // Ya no necesitamos verificar success aquí porque el interceptor lo maneja
      const { token, user } = response.data.data;
      
      // Guardar token y datos del usuario
      localStorage.setItem('token', token);
      localStorage.setItem('user', JSON.stringify(user));
      
      return { token, user };
    } catch (error) {
      // Propagar el error para que sea manejado por el componente
      throw error;
    }
    
  },

  /**
   * Método para registrar un nuevo usuario
   * @param {Object} userData - Datos del usuario a registrar
   * @returns {Promise} Promesa con la respuesta del servidor
   */
  async register(userData) {
    try {
      const response = await axiosInstance.post('/auth/register', userData);
      
      // Si el registro es exitoso y devuelve un token, lo guardamos
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
      }
      
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  /**
   * Método para cerrar sesión
   */
  logout() {
    localStorage.removeItem('token');
  },
  getCurrentUser() {
    const userStr = localStorage.getItem('user');
    return userStr ? JSON.parse(userStr) : null;
  },

  getToken() {
    return localStorage.getItem('token');
  },

  // Verificar si el usuario está autenticado
  isAuthenticated() {
    return this.getToken() !== null;
  },

  /**
   * Método privado para manejar errores
   * @param {Error} error - Error a manejar
   * @returns {Object} Objeto de error formateado
   */
  handleError(error) {
    if (error.response) {
      // Personalizamos el mensaje de error según el tipo
      const errorMessage = error.response.data?.message || 'Error en la operación';
      return {
        message: errorMessage,
        status: error.response.status,
        data: error.response.data
      };
    }
    
    return {
      message: 'Error de conexión con el servidor',
      status: 500,
      data: null
    };
  }
};

export default authService;

Estructura: services
Archivo: clientService.js
--------------------------------------------------
// src/services/clientService.js

import axiosInstance from '../config/axios';
import searchService from './searchService'

// src/services/clientService.js

const clientService = {
  async getClients(paginationRequest) {
    try {
      // Si hay término de búsqueda, usar el endpoint de búsqueda
      if (paginationRequest.search) {
        return searchService.searchClients(paginationRequest.search, paginationRequest);
      }

      const params = {
        page: paginationRequest.page || 0,
        size: paginationRequest.size || 10,
        sortBy: paginationRequest.sortBy || 'nombre',
        sortDirection: paginationRequest.sortDirection || 'ASC',
        role: 'CLIENTE',
        isActive: true
      };

      const response = await axiosInstance.get('/users', { params });
      return response.data.data;
    } catch (error) {
      console.error('Error fetching clients:', error);
      throw error;
    }
  }
};

export default clientService;

Estructura: services
Archivo: petService.js
--------------------------------------------------
import axios from 'axios';

// URL base del API
const API_BASE_URL = 'http://localhost:8080/api/veterinary';

// Función para obtener el token almacenado (puedes modificarla según cómo gestionas el token)
const getAuthToken = () => {
  return localStorage.getItem('token'); // Suponiendo que el token se guarda en localStorage
};

const petService = {
    getPetsByClientId: async (clientId) => {
        try {
          const token = getAuthToken();
          const response = await axios.get(`${API_BASE_URL}/clients/${clientId}/pets`, {
            headers: {
              Authorization: `Bearer ${token}` // Incluimos el token en los headers
            }
          });
    
          // Verificar que la respuesta tenga éxito y la estructura sea correcta
          if (response.data.success && response.data.data && Array.isArray(response.data.data.mascotas)) {
            return { success: true, mascotas: response.data.data.mascotas };
          } else {
            return { success: false, error: { message: 'No pets found' } };
          }
        } catch (error) {
          console.error('Error in getPetsByClientId:', error);
          return { success: false, error: { message: 'Error fetching pets' } };
        }
      },

  addHistoryToPet: async (petId, historyData) => {
    try {
      const token = getAuthToken();
      const response = await axios.post(`${API_BASE_URL}/pets/${petId}/history`, historyData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.status === 201) {
        return { success: true, data: response.data };
      } else {
        return { success: false, error: { message: 'Error adding history' } };
      }
    } catch (error) {
      console.error('Error in addHistoryToPet:', error);
      return { success: false, error: { message: 'Error adding history' } };
    }
  },

  getHistoryByPetId: async (petId) => {
    try {
      const token = getAuthToken();
      const response = await axios.get(`${API_BASE_URL}/pets/${petId}/history`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.status === 200) {
        return { success: true, data: response.data };
      } else {
        return { success: false, error: { message: 'Error fetching history' } };
      }
    } catch (error) {
      console.error('Error in getHistoryByPetId:', error);
      return { success: false, error: { message: 'Error fetching history' } };
    }
  },

  scheduleAppointment: async (petId, appointmentData) => {
    try {
      const token = getAuthToken();
      const response = await axios.post(`${API_BASE_URL}/pets/${petId}/appointments`, appointmentData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.status === 201) {
        return { success: true, data: response.data };
      } else {
        return { success: false, error: { message: 'Error scheduling appointment' } };
      }
    } catch (error) {
      console.error('Error in scheduleAppointment:', error);
      return { success: false, error: { message: 'Error scheduling appointment' } };
    }
  }
};

export default petService;

Estructura: services
Archivo: searchService.js
--------------------------------------------------
// src/services/searchService.js
import axiosInstance from '../config/axios';

const searchService = {
  async searchClients(searchTerm, paginationRequest) {
    try {
      const params = {
        searchTerm,
        page: paginationRequest.page || 0,
        size: paginationRequest.size || 10,
        sortBy: paginationRequest.sortBy || 'nombre',
        sortDirection: paginationRequest.sortDirection || 'ASC'
      };

      const response = await axiosInstance.get('/users/search', { params });
      return response.data.data;
    } catch (error) {
      console.error('Error searching clients:', error);
      throw error;
    }
  }
};

export default searchService;

Estructura: services
Archivo: userService.js
--------------------------------------------------
// src/services/userService.js
import axiosInstance from '../config/axios';

const userService = {
  // Obtener usuarios con paginación y filtros
  async getUsers(paginationRequest) {
    try {
      // Construir parámetros de la petición
      const params = {
        page: paginationRequest.page || 0,
        size: paginationRequest.size || 10,
        sortBy: paginationRequest.sortBy || 'nombre',
        sortDirection: paginationRequest.sortDirection || 'ASC'
      };

      // Añadir filtros adicionales si existen
      if (paginationRequest.role && paginationRequest.role !== 'ALL') {
        params.role = paginationRequest.role;
      }

      if (paginationRequest.isActive !== undefined) {
        params.isActive = paginationRequest.isActive;
      }

      if (paginationRequest.search) {
        params.filterBy = 'nombre';
        params.filterValue = paginationRequest.search;
      }

      const response = await axiosInstance.get('/users', { params });
      return response.data.data;
    } catch (error) {
      console.error('Error in getUsers:', error);
      throw error;
    }
  },

  // Crear nuevo usuario
  async createUser(userData) {
    try {
      const response = await axiosInstance.post('/users', userData);
      return response.data.data;
    } catch (error) {
      console.error('Error in createUser:', error);
      throw error;
    }
  },

  // Actualizar usuario existente
  async updateUser(userId, userData) {
    try {
      const response = await axiosInstance.put(`/users/${userId}`, userData);
      return response.data.data;
    } catch (error) {
      console.error('Error in updateUser:', error);
      throw error;
    }
  },

  // Eliminar usuario
  async deleteUser(userId) {
    try {
      const response = await axiosInstance.delete(`/users/${userId}`);
      return response.data.data;
    } catch (error) {
      console.error('Error in deleteUser:', error);
      throw error;
    }
  },

  // Cambiar estado del usuario (activar/desactivar)
  async toggleUserStatus(userId, isActive) {
    try {
      const response = await axiosInstance.post(`/users/${userId}/toggle-status`, {
        isActive: isActive
      });
      return response.data.data;
    } catch (error) {
      console.error('Error in toggleUserStatus:', error);
      throw error;
    }
  }
};

export default userService;

Estructura: __mocks__
Archivo: axiosMock.js
--------------------------------------------------
// __mocks__/axios.js

const axios = {
    create: jest.fn(() => axios),
    interceptors: {
      request: {
        use: jest.fn(),
      },
      response: {
        use: jest.fn(),
      },
    },
    get: jest.fn(),
    post: jest.fn(),
    // Puedes añadir otros métodos como 'put', 'delete', etc., si los necesitas en los tests
  };
  
  export default axios;
  

